function [plot_out] = superplot(x,y,varargin)
%SUPERPLOT This is function handles the majority of the required plotting
%functions
%   Detailed explanation goes here

%% Default Parameters
    defaultString = 'unknown';
    defaultPlot = zeros(length(x),1);
    defaultAxis = [x(1) x(length(x)) min(y) max(y)];
    emptyString = "";
%     defaultChoice = 0;
    
%% Input parser
    p = inputParser;
    validVector = @(var) isvector(var) && ~isempty(var);
    validLength = @(v) length(v) == length(x);
    addRequired(p,'x',validVector);
    addRequired(p,'y',validVector);
    addParameter(p,'cmpY',defaultPlot,validLength);
    addParameter(p,'plotName',defaultString,@isstring);
    addParameter(p,'figureName',defaultString,@isstring);
    addParameter(p,'plotAxis',defaultAxis,validVector);
    addParameter(p,'xName',defaultString,@isstring);
    addParameter(p,'yName',defaultString,@isstring);
    addParameter(p,'yLegend',defaultString,@isstring);
    addParameter(p,'cmpYLegend',emptyString);
    parse(p,x,y,varargin{:});
    
%% Usage
disp("Total number of input arguments: " + nargin)
celldisp(varargin);
fprintf("%d\n",length(varargin));

if (length(varargin) == 0);
    fprintf("--------------------------- superplot() usage ---------------------------\n\n");
    fprintf("superplot parameters:\n");
    fprintf("'x': required parameter to plot data in 
    return
end
    
%% Plotting
    plot_out = figure('name',p.Results.figureName);
    hold on
    plot(x,y);
    title(p.Results.plotName);
    axis(p.Results.plotAxis);
    ylabel(p.Results.yName);
    xlabel(p.Results.xName);
    legend(p.Results.yLegend);
    grid;
    
%% Optional plotting
    if any(p.Results.cmpY)
        plot(x,p.Results.cmpY)
    end
    if (p.Results.cmpYLegend ~= "")
        legend(p.Results.yLegend, p.Results.cmpYLegend);
    end
    datacursormode(plot_out,'on');
    plot_out.Position = [10 10 1000 900];
    location = strcat('./pics/',p.Results.figureName,'.png');
    print(plot_out, '-dpng', location);
    hold off;
end