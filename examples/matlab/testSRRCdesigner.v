// -------------------------------------------------------------
//
// Module: testSRRCdesigner
// Generated by MATLAB(R) 9.4 and Filter Design HDL Coder 3.1.3.
// Generated on: 2022-03-03 12:46:37
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// InputType: signed/unsigned
// ResetType: Synchronous
// FIRAdderStyle: tree
// MultiplierInputPipeline: 1
// MultiplierOutputPipeline: 1
// OptimizeForHDL: on
// HDLSimCmd: vsim %s.%s\n
// TargetDirectory: A:\School\EE465\EE465\examples\matlab
// AddPipelineRegisters: on
// Name: testSRRCdesigner
// TargetLanguage: Verilog
// MultifileTestBench: on
// TestBenchStimulus: impulse step ramp chirp noise 
// InitializeTestBenchInputs: on
// GenerateCoSimBlock: on

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 101
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module testSRRCdesigner
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   [63:0] filter_in; //double
  output  [63:0] filter_out; //double

////////////////////////////////////////////////////////////////
//Module Architecture: testSRRCdesigner
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter coeff1 = -4.5281611993329609E-03; //double
  parameter coeff2 = -4.9719452477521896E-03; //double
  parameter coeff3 = -5.1738866909011964E-03; //double
  parameter coeff4 = -5.1077536965511844E-03; //double
  parameter coeff5 = -4.7599714418767106E-03; //double
  parameter coeff6 = -4.1310996975762937E-03; //double
  parameter coeff7 = -3.2366605931797893E-03; //double
  parameter coeff8 = -2.1072394163250017E-03; //double
  parameter coeff9 = -7.8781452412439760E-04; //double
  parameter coeff10 = 6.6369064982416538E-04; //double
  parameter coeff11 = 2.1786016502428778E-03; //double
  parameter coeff12 = 3.6803623494665177E-03; //double
  parameter coeff13 = 5.0879717910278909E-03; //double
  parameter coeff14 = 6.3198475165945475E-03; //double
  parameter coeff15 = 7.2979467803851250E-03; //double
  parameter coeff16 = 7.9519566779583627E-03; //double
  parameter coeff17 = 8.2233523200860182E-03; //double
  parameter coeff18 = 8.0691196587339975E-03; //double
  parameter coeff19 = 7.4649468745022719E-03; //double
  parameter coeff20 = 6.4077053435070428E-03; //double
  parameter coeff21 = 4.9170676113557349E-03; //double
  parameter coeff22 = 3.0361445335819956E-03; //double
  parameter coeff23 = 8.3106537892014653E-04; //double
  parameter coeff24 = -1.6105285616679510E-03; //double
  parameter coeff25 = -4.1820565567881511E-03; //double
  parameter coeff26 = -6.7615664288953950E-03; //double
  parameter coeff27 = -9.2161783885255800E-03; //double
  parameter coeff28 = -1.1407240397983714E-02; //double
  parameter coeff29 = -1.3195992311260443E-02; //double
  parameter coeff30 = -1.4449505879515122E-02; //double
  parameter coeff31 = -1.5046647478131293E-02; //double
  parameter coeff32 = -1.4883801302668212E-02; //double
  parameter coeff33 = -1.3880093492300976E-02; //double
  parameter coeff34 = -1.1981872317251186E-02; //double
  parameter coeff35 = -9.1662257921539692E-03; //double
  parameter coeff36 = -5.4433548756097679E-03; //double
  parameter coeff37 = -8.5766629463902681E-04; //double
  parameter coeff38 = 4.5124979559402582E-03; //double
  parameter coeff39 = 1.0556519560607039E-02; //double
  parameter coeff40 = 1.7134516330502985E-02; //double
  parameter coeff41 = 2.4081613619669037E-02; //double
  parameter coeff42 = 3.1213323812530197E-02; //double
  parameter coeff43 = 3.8331832459392354E-02; //double
  parameter coeff44 = 4.5232947332468729E-02; //double
  parameter coeff45 = 5.1713434616440852E-02; //double
  parameter coeff46 = 5.7578446203421750E-02; //double
  parameter coeff47 = 6.2648734667118136E-02; //double
  parameter coeff48 = 6.6767358392674989E-02; //double
  parameter coeff49 = 6.9805598372584793E-02; //double
  parameter coeff50 = 7.1667839572458134E-02; //double
  parameter coeff51 = 7.2295212175775378E-02; //double
  parameter coeff52 = 7.1667839572458134E-02; //double
  parameter coeff53 = 6.9805598372584793E-02; //double
  parameter coeff54 = 6.6767358392674989E-02; //double
  parameter coeff55 = 6.2648734667118136E-02; //double
  parameter coeff56 = 5.7578446203421750E-02; //double
  parameter coeff57 = 5.1713434616440852E-02; //double
  parameter coeff58 = 4.5232947332468729E-02; //double
  parameter coeff59 = 3.8331832459392354E-02; //double
  parameter coeff60 = 3.1213323812530197E-02; //double
  parameter coeff61 = 2.4081613619669037E-02; //double
  parameter coeff62 = 1.7134516330502985E-02; //double
  parameter coeff63 = 1.0556519560607039E-02; //double
  parameter coeff64 = 4.5124979559402582E-03; //double
  parameter coeff65 = -8.5766629463902681E-04; //double
  parameter coeff66 = -5.4433548756097679E-03; //double
  parameter coeff67 = -9.1662257921539692E-03; //double
  parameter coeff68 = -1.1981872317251186E-02; //double
  parameter coeff69 = -1.3880093492300976E-02; //double
  parameter coeff70 = -1.4883801302668212E-02; //double
  parameter coeff71 = -1.5046647478131293E-02; //double
  parameter coeff72 = -1.4449505879515122E-02; //double
  parameter coeff73 = -1.3195992311260443E-02; //double
  parameter coeff74 = -1.1407240397983714E-02; //double
  parameter coeff75 = -9.2161783885255800E-03; //double
  parameter coeff76 = -6.7615664288953950E-03; //double
  parameter coeff77 = -4.1820565567881511E-03; //double
  parameter coeff78 = -1.6105285616679510E-03; //double
  parameter coeff79 = 8.3106537892014653E-04; //double
  parameter coeff80 = 3.0361445335819956E-03; //double
  parameter coeff81 = 4.9170676113557349E-03; //double
  parameter coeff82 = 6.4077053435070428E-03; //double
  parameter coeff83 = 7.4649468745022719E-03; //double
  parameter coeff84 = 8.0691196587339975E-03; //double
  parameter coeff85 = 8.2233523200860182E-03; //double
  parameter coeff86 = 7.9519566779583627E-03; //double
  parameter coeff87 = 7.2979467803851250E-03; //double
  parameter coeff88 = 6.3198475165945475E-03; //double
  parameter coeff89 = 5.0879717910278909E-03; //double
  parameter coeff90 = 3.6803623494665177E-03; //double
  parameter coeff91 = 2.1786016502428778E-03; //double
  parameter coeff92 = 6.6369064982416538E-04; //double
  parameter coeff93 = -7.8781452412439760E-04; //double
  parameter coeff94 = -2.1072394163250017E-03; //double
  parameter coeff95 = -3.2366605931797893E-03; //double
  parameter coeff96 = -4.1310996975762937E-03; //double
  parameter coeff97 = -4.7599714418767106E-03; //double
  parameter coeff98 = -5.1077536965511844E-03; //double
  parameter coeff99 = -5.1738866909011964E-03; //double
  parameter coeff100 = -4.9719452477521896E-03; //double
  parameter coeff101 = -4.5281611993329609E-03; //double

  // Signals
  real delay_pipeline [0:100] ; // double
  real product101; // double
  real delay_pipeline_100_under_pipe; // double
  real coeff101_pipe; // double
  real product101_pipe; // double
  real product100; // double
  real delay_pipeline_99_under_pipe; // double
  real coeff100_pipe; // double
  real product100_pipe; // double
  real product99; // double
  real delay_pipeline_98_under_pipe; // double
  real coeff99_pipe; // double
  real product99_pipe; // double
  real product98; // double
  real delay_pipeline_97_under_pipe; // double
  real coeff98_pipe; // double
  real product98_pipe; // double
  real product97; // double
  real delay_pipeline_96_under_pipe; // double
  real coeff97_pipe; // double
  real product97_pipe; // double
  real product96; // double
  real delay_pipeline_95_under_pipe; // double
  real coeff96_pipe; // double
  real product96_pipe; // double
  real product95; // double
  real delay_pipeline_94_under_pipe; // double
  real coeff95_pipe; // double
  real product95_pipe; // double
  real product94; // double
  real delay_pipeline_93_under_pipe; // double
  real coeff94_pipe; // double
  real product94_pipe; // double
  real product93; // double
  real delay_pipeline_92_under_pipe; // double
  real coeff93_pipe; // double
  real product93_pipe; // double
  real product92; // double
  real delay_pipeline_91_under_pipe; // double
  real coeff92_pipe; // double
  real product92_pipe; // double
  real product91; // double
  real delay_pipeline_90_under_pipe; // double
  real coeff91_pipe; // double
  real product91_pipe; // double
  real product90; // double
  real delay_pipeline_89_under_pipe; // double
  real coeff90_pipe; // double
  real product90_pipe; // double
  real product89; // double
  real delay_pipeline_88_under_pipe; // double
  real coeff89_pipe; // double
  real product89_pipe; // double
  real product88; // double
  real delay_pipeline_87_under_pipe; // double
  real coeff88_pipe; // double
  real product88_pipe; // double
  real product87; // double
  real delay_pipeline_86_under_pipe; // double
  real coeff87_pipe; // double
  real product87_pipe; // double
  real product86; // double
  real delay_pipeline_85_under_pipe; // double
  real coeff86_pipe; // double
  real product86_pipe; // double
  real product85; // double
  real delay_pipeline_84_under_pipe; // double
  real coeff85_pipe; // double
  real product85_pipe; // double
  real product84; // double
  real delay_pipeline_83_under_pipe; // double
  real coeff84_pipe; // double
  real product84_pipe; // double
  real product83; // double
  real delay_pipeline_82_under_pipe; // double
  real coeff83_pipe; // double
  real product83_pipe; // double
  real product82; // double
  real delay_pipeline_81_under_pipe; // double
  real coeff82_pipe; // double
  real product82_pipe; // double
  real product81; // double
  real delay_pipeline_80_under_pipe; // double
  real coeff81_pipe; // double
  real product81_pipe; // double
  real product80; // double
  real delay_pipeline_79_under_pipe; // double
  real coeff80_pipe; // double
  real product80_pipe; // double
  real product79; // double
  real delay_pipeline_78_under_pipe; // double
  real coeff79_pipe; // double
  real product79_pipe; // double
  real product78; // double
  real delay_pipeline_77_under_pipe; // double
  real coeff78_pipe; // double
  real product78_pipe; // double
  real product77; // double
  real delay_pipeline_76_under_pipe; // double
  real coeff77_pipe; // double
  real product77_pipe; // double
  real product76; // double
  real delay_pipeline_75_under_pipe; // double
  real coeff76_pipe; // double
  real product76_pipe; // double
  real product75; // double
  real delay_pipeline_74_under_pipe; // double
  real coeff75_pipe; // double
  real product75_pipe; // double
  real product74; // double
  real delay_pipeline_73_under_pipe; // double
  real coeff74_pipe; // double
  real product74_pipe; // double
  real product73; // double
  real delay_pipeline_72_under_pipe; // double
  real coeff73_pipe; // double
  real product73_pipe; // double
  real product72; // double
  real delay_pipeline_71_under_pipe; // double
  real coeff72_pipe; // double
  real product72_pipe; // double
  real product71; // double
  real delay_pipeline_70_under_pipe; // double
  real coeff71_pipe; // double
  real product71_pipe; // double
  real product70; // double
  real delay_pipeline_69_under_pipe; // double
  real coeff70_pipe; // double
  real product70_pipe; // double
  real product69; // double
  real delay_pipeline_68_under_pipe; // double
  real coeff69_pipe; // double
  real product69_pipe; // double
  real product68; // double
  real delay_pipeline_67_under_pipe; // double
  real coeff68_pipe; // double
  real product68_pipe; // double
  real product67; // double
  real delay_pipeline_66_under_pipe; // double
  real coeff67_pipe; // double
  real product67_pipe; // double
  real product66; // double
  real delay_pipeline_65_under_pipe; // double
  real coeff66_pipe; // double
  real product66_pipe; // double
  real product65; // double
  real delay_pipeline_64_under_pipe; // double
  real coeff65_pipe; // double
  real product65_pipe; // double
  real product64; // double
  real delay_pipeline_63_under_pipe; // double
  real coeff64_pipe; // double
  real product64_pipe; // double
  real product63; // double
  real delay_pipeline_62_under_pipe; // double
  real coeff63_pipe; // double
  real product63_pipe; // double
  real product62; // double
  real delay_pipeline_61_under_pipe; // double
  real coeff62_pipe; // double
  real product62_pipe; // double
  real product61; // double
  real delay_pipeline_60_under_pipe; // double
  real coeff61_pipe; // double
  real product61_pipe; // double
  real product60; // double
  real delay_pipeline_59_under_pipe; // double
  real coeff60_pipe; // double
  real product60_pipe; // double
  real product59; // double
  real delay_pipeline_58_under_pipe; // double
  real coeff59_pipe; // double
  real product59_pipe; // double
  real product58; // double
  real delay_pipeline_57_under_pipe; // double
  real coeff58_pipe; // double
  real product58_pipe; // double
  real product57; // double
  real delay_pipeline_56_under_pipe; // double
  real coeff57_pipe; // double
  real product57_pipe; // double
  real product56; // double
  real delay_pipeline_55_under_pipe; // double
  real coeff56_pipe; // double
  real product56_pipe; // double
  real product55; // double
  real delay_pipeline_54_under_pipe; // double
  real coeff55_pipe; // double
  real product55_pipe; // double
  real product54; // double
  real delay_pipeline_53_under_pipe; // double
  real coeff54_pipe; // double
  real product54_pipe; // double
  real product53; // double
  real delay_pipeline_52_under_pipe; // double
  real coeff53_pipe; // double
  real product53_pipe; // double
  real product52; // double
  real delay_pipeline_51_under_pipe; // double
  real coeff52_pipe; // double
  real product52_pipe; // double
  real product51; // double
  real delay_pipeline_50_under_pipe; // double
  real coeff51_pipe; // double
  real product51_pipe; // double
  real product50; // double
  real delay_pipeline_49_under_pipe; // double
  real coeff50_pipe; // double
  real product50_pipe; // double
  real product49; // double
  real delay_pipeline_48_under_pipe; // double
  real coeff49_pipe; // double
  real product49_pipe; // double
  real product48; // double
  real delay_pipeline_47_under_pipe; // double
  real coeff48_pipe; // double
  real product48_pipe; // double
  real product47; // double
  real delay_pipeline_46_under_pipe; // double
  real coeff47_pipe; // double
  real product47_pipe; // double
  real product46; // double
  real delay_pipeline_45_under_pipe; // double
  real coeff46_pipe; // double
  real product46_pipe; // double
  real product45; // double
  real delay_pipeline_44_under_pipe; // double
  real coeff45_pipe; // double
  real product45_pipe; // double
  real product44; // double
  real delay_pipeline_43_under_pipe; // double
  real coeff44_pipe; // double
  real product44_pipe; // double
  real product43; // double
  real delay_pipeline_42_under_pipe; // double
  real coeff43_pipe; // double
  real product43_pipe; // double
  real product42; // double
  real delay_pipeline_41_under_pipe; // double
  real coeff42_pipe; // double
  real product42_pipe; // double
  real product41; // double
  real delay_pipeline_40_under_pipe; // double
  real coeff41_pipe; // double
  real product41_pipe; // double
  real product40; // double
  real delay_pipeline_39_under_pipe; // double
  real coeff40_pipe; // double
  real product40_pipe; // double
  real product39; // double
  real delay_pipeline_38_under_pipe; // double
  real coeff39_pipe; // double
  real product39_pipe; // double
  real product38; // double
  real delay_pipeline_37_under_pipe; // double
  real coeff38_pipe; // double
  real product38_pipe; // double
  real product37; // double
  real delay_pipeline_36_under_pipe; // double
  real coeff37_pipe; // double
  real product37_pipe; // double
  real product36; // double
  real delay_pipeline_35_under_pipe; // double
  real coeff36_pipe; // double
  real product36_pipe; // double
  real product35; // double
  real delay_pipeline_34_under_pipe; // double
  real coeff35_pipe; // double
  real product35_pipe; // double
  real product34; // double
  real delay_pipeline_33_under_pipe; // double
  real coeff34_pipe; // double
  real product34_pipe; // double
  real product33; // double
  real delay_pipeline_32_under_pipe; // double
  real coeff33_pipe; // double
  real product33_pipe; // double
  real product32; // double
  real delay_pipeline_31_under_pipe; // double
  real coeff32_pipe; // double
  real product32_pipe; // double
  real product31; // double
  real delay_pipeline_30_under_pipe; // double
  real coeff31_pipe; // double
  real product31_pipe; // double
  real product30; // double
  real delay_pipeline_29_under_pipe; // double
  real coeff30_pipe; // double
  real product30_pipe; // double
  real product29; // double
  real delay_pipeline_28_under_pipe; // double
  real coeff29_pipe; // double
  real product29_pipe; // double
  real product28; // double
  real delay_pipeline_27_under_pipe; // double
  real coeff28_pipe; // double
  real product28_pipe; // double
  real product27; // double
  real delay_pipeline_26_under_pipe; // double
  real coeff27_pipe; // double
  real product27_pipe; // double
  real product26; // double
  real delay_pipeline_25_under_pipe; // double
  real coeff26_pipe; // double
  real product26_pipe; // double
  real product25; // double
  real delay_pipeline_24_under_pipe; // double
  real coeff25_pipe; // double
  real product25_pipe; // double
  real product24; // double
  real delay_pipeline_23_under_pipe; // double
  real coeff24_pipe; // double
  real product24_pipe; // double
  real product23; // double
  real delay_pipeline_22_under_pipe; // double
  real coeff23_pipe; // double
  real product23_pipe; // double
  real product22; // double
  real delay_pipeline_21_under_pipe; // double
  real coeff22_pipe; // double
  real product22_pipe; // double
  real product21; // double
  real delay_pipeline_20_under_pipe; // double
  real coeff21_pipe; // double
  real product21_pipe; // double
  real product20; // double
  real delay_pipeline_19_under_pipe; // double
  real coeff20_pipe; // double
  real product20_pipe; // double
  real product19; // double
  real delay_pipeline_18_under_pipe; // double
  real coeff19_pipe; // double
  real product19_pipe; // double
  real product18; // double
  real delay_pipeline_17_under_pipe; // double
  real coeff18_pipe; // double
  real product18_pipe; // double
  real product17; // double
  real delay_pipeline_16_under_pipe; // double
  real coeff17_pipe; // double
  real product17_pipe; // double
  real product16; // double
  real delay_pipeline_15_under_pipe; // double
  real coeff16_pipe; // double
  real product16_pipe; // double
  real product15; // double
  real delay_pipeline_14_under_pipe; // double
  real coeff15_pipe; // double
  real product15_pipe; // double
  real product14; // double
  real delay_pipeline_13_under_pipe; // double
  real coeff14_pipe; // double
  real product14_pipe; // double
  real product13; // double
  real delay_pipeline_12_under_pipe; // double
  real coeff13_pipe; // double
  real product13_pipe; // double
  real product12; // double
  real delay_pipeline_11_under_pipe; // double
  real coeff12_pipe; // double
  real product12_pipe; // double
  real product11; // double
  real delay_pipeline_10_under_pipe; // double
  real coeff11_pipe; // double
  real product11_pipe; // double
  real product10; // double
  real delay_pipeline_9_under_pipe; // double
  real coeff10_pipe; // double
  real product10_pipe; // double
  real product9; // double
  real delay_pipeline_8_under_pipe; // double
  real coeff9_pipe; // double
  real product9_pipe; // double
  real product8; // double
  real delay_pipeline_7_under_pipe; // double
  real coeff8_pipe; // double
  real product8_pipe; // double
  real product7; // double
  real delay_pipeline_6_under_pipe; // double
  real coeff7_pipe; // double
  real product7_pipe; // double
  real product6; // double
  real delay_pipeline_5_under_pipe; // double
  real coeff6_pipe; // double
  real product6_pipe; // double
  real product5; // double
  real delay_pipeline_4_under_pipe; // double
  real coeff5_pipe; // double
  real product5_pipe; // double
  real product4; // double
  real delay_pipeline_3_under_pipe; // double
  real coeff4_pipe; // double
  real product4_pipe; // double
  real product3; // double
  real delay_pipeline_2_under_pipe; // double
  real coeff3_pipe; // double
  real product3_pipe; // double
  real product2; // double
  real delay_pipeline_1_under_pipe; // double
  real coeff2_pipe; // double
  real product2_pipe; // double
  real product1; // double
  real delay_pipeline_0_under_pipe; // double
  real coeff1_pipe; // double
  real product1_pipe; // double
  real sum_final; // double
  real sum1_1; // double
  real sumpipe1_1; // double
  real sum1_2; // double
  real sumpipe1_2; // double
  real sum1_3; // double
  real sumpipe1_3; // double
  real sum1_4; // double
  real sumpipe1_4; // double
  real sum1_5; // double
  real sumpipe1_5; // double
  real sum1_6; // double
  real sumpipe1_6; // double
  real sum1_7; // double
  real sumpipe1_7; // double
  real sum1_8; // double
  real sumpipe1_8; // double
  real sum1_9; // double
  real sumpipe1_9; // double
  real sum1_10; // double
  real sumpipe1_10; // double
  real sum1_11; // double
  real sumpipe1_11; // double
  real sum1_12; // double
  real sumpipe1_12; // double
  real sum1_13; // double
  real sumpipe1_13; // double
  real sum1_14; // double
  real sumpipe1_14; // double
  real sum1_15; // double
  real sumpipe1_15; // double
  real sum1_16; // double
  real sumpipe1_16; // double
  real sum1_17; // double
  real sumpipe1_17; // double
  real sum1_18; // double
  real sumpipe1_18; // double
  real sum1_19; // double
  real sumpipe1_19; // double
  real sum1_20; // double
  real sumpipe1_20; // double
  real sum1_21; // double
  real sumpipe1_21; // double
  real sum1_22; // double
  real sumpipe1_22; // double
  real sum1_23; // double
  real sumpipe1_23; // double
  real sum1_24; // double
  real sumpipe1_24; // double
  real sum1_25; // double
  real sumpipe1_25; // double
  real sum1_26; // double
  real sumpipe1_26; // double
  real sum1_27; // double
  real sumpipe1_27; // double
  real sum1_28; // double
  real sumpipe1_28; // double
  real sum1_29; // double
  real sumpipe1_29; // double
  real sum1_30; // double
  real sumpipe1_30; // double
  real sum1_31; // double
  real sumpipe1_31; // double
  real sum1_32; // double
  real sumpipe1_32; // double
  real sum1_33; // double
  real sumpipe1_33; // double
  real sum1_34; // double
  real sumpipe1_34; // double
  real sum1_35; // double
  real sumpipe1_35; // double
  real sum1_36; // double
  real sumpipe1_36; // double
  real sum1_37; // double
  real sumpipe1_37; // double
  real sum1_38; // double
  real sumpipe1_38; // double
  real sum1_39; // double
  real sumpipe1_39; // double
  real sum1_40; // double
  real sumpipe1_40; // double
  real sum1_41; // double
  real sumpipe1_41; // double
  real sum1_42; // double
  real sumpipe1_42; // double
  real sum1_43; // double
  real sumpipe1_43; // double
  real sum1_44; // double
  real sumpipe1_44; // double
  real sum1_45; // double
  real sumpipe1_45; // double
  real sum1_46; // double
  real sumpipe1_46; // double
  real sum1_47; // double
  real sumpipe1_47; // double
  real sum1_48; // double
  real sumpipe1_48; // double
  real sum1_49; // double
  real sumpipe1_49; // double
  real sum1_50; // double
  real sumpipe1_50; // double
  real sumpipe1_51; // double
  real sum2_1; // double
  real sumpipe2_1; // double
  real sum2_2; // double
  real sumpipe2_2; // double
  real sum2_3; // double
  real sumpipe2_3; // double
  real sum2_4; // double
  real sumpipe2_4; // double
  real sum2_5; // double
  real sumpipe2_5; // double
  real sum2_6; // double
  real sumpipe2_6; // double
  real sum2_7; // double
  real sumpipe2_7; // double
  real sum2_8; // double
  real sumpipe2_8; // double
  real sum2_9; // double
  real sumpipe2_9; // double
  real sum2_10; // double
  real sumpipe2_10; // double
  real sum2_11; // double
  real sumpipe2_11; // double
  real sum2_12; // double
  real sumpipe2_12; // double
  real sum2_13; // double
  real sumpipe2_13; // double
  real sum2_14; // double
  real sumpipe2_14; // double
  real sum2_15; // double
  real sumpipe2_15; // double
  real sum2_16; // double
  real sumpipe2_16; // double
  real sum2_17; // double
  real sumpipe2_17; // double
  real sum2_18; // double
  real sumpipe2_18; // double
  real sum2_19; // double
  real sumpipe2_19; // double
  real sum2_20; // double
  real sumpipe2_20; // double
  real sum2_21; // double
  real sumpipe2_21; // double
  real sum2_22; // double
  real sumpipe2_22; // double
  real sum2_23; // double
  real sumpipe2_23; // double
  real sum2_24; // double
  real sumpipe2_24; // double
  real sum2_25; // double
  real sumpipe2_25; // double
  real sumpipe2_26; // double
  real sum3_1; // double
  real sumpipe3_1; // double
  real sum3_2; // double
  real sumpipe3_2; // double
  real sum3_3; // double
  real sumpipe3_3; // double
  real sum3_4; // double
  real sumpipe3_4; // double
  real sum3_5; // double
  real sumpipe3_5; // double
  real sum3_6; // double
  real sumpipe3_6; // double
  real sum3_7; // double
  real sumpipe3_7; // double
  real sum3_8; // double
  real sumpipe3_8; // double
  real sum3_9; // double
  real sumpipe3_9; // double
  real sum3_10; // double
  real sumpipe3_10; // double
  real sum3_11; // double
  real sumpipe3_11; // double
  real sum3_12; // double
  real sumpipe3_12; // double
  real sum3_13; // double
  real sumpipe3_13; // double
  real sum4_1; // double
  real sumpipe4_1; // double
  real sum4_2; // double
  real sumpipe4_2; // double
  real sum4_3; // double
  real sumpipe4_3; // double
  real sum4_4; // double
  real sumpipe4_4; // double
  real sum4_5; // double
  real sumpipe4_5; // double
  real sum4_6; // double
  real sumpipe4_6; // double
  real sumpipe4_7; // double
  real sum5_1; // double
  real sumpipe5_1; // double
  real sum5_2; // double
  real sumpipe5_2; // double
  real sum5_3; // double
  real sumpipe5_3; // double
  real sumpipe5_4; // double
  real sum6_1; // double
  real sumpipe6_1; // double
  real sum6_2; // double
  real sumpipe6_2; // double
  real sum7_1; // double
  real sumpipe7_1; // double
  real output_typeconvert; // double
  real output_register; // double

  // Block Statements
  always @( posedge clk)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0.0000000000000000E+00;
        delay_pipeline[1] <= 0.0000000000000000E+00;
        delay_pipeline[2] <= 0.0000000000000000E+00;
        delay_pipeline[3] <= 0.0000000000000000E+00;
        delay_pipeline[4] <= 0.0000000000000000E+00;
        delay_pipeline[5] <= 0.0000000000000000E+00;
        delay_pipeline[6] <= 0.0000000000000000E+00;
        delay_pipeline[7] <= 0.0000000000000000E+00;
        delay_pipeline[8] <= 0.0000000000000000E+00;
        delay_pipeline[9] <= 0.0000000000000000E+00;
        delay_pipeline[10] <= 0.0000000000000000E+00;
        delay_pipeline[11] <= 0.0000000000000000E+00;
        delay_pipeline[12] <= 0.0000000000000000E+00;
        delay_pipeline[13] <= 0.0000000000000000E+00;
        delay_pipeline[14] <= 0.0000000000000000E+00;
        delay_pipeline[15] <= 0.0000000000000000E+00;
        delay_pipeline[16] <= 0.0000000000000000E+00;
        delay_pipeline[17] <= 0.0000000000000000E+00;
        delay_pipeline[18] <= 0.0000000000000000E+00;
        delay_pipeline[19] <= 0.0000000000000000E+00;
        delay_pipeline[20] <= 0.0000000000000000E+00;
        delay_pipeline[21] <= 0.0000000000000000E+00;
        delay_pipeline[22] <= 0.0000000000000000E+00;
        delay_pipeline[23] <= 0.0000000000000000E+00;
        delay_pipeline[24] <= 0.0000000000000000E+00;
        delay_pipeline[25] <= 0.0000000000000000E+00;
        delay_pipeline[26] <= 0.0000000000000000E+00;
        delay_pipeline[27] <= 0.0000000000000000E+00;
        delay_pipeline[28] <= 0.0000000000000000E+00;
        delay_pipeline[29] <= 0.0000000000000000E+00;
        delay_pipeline[30] <= 0.0000000000000000E+00;
        delay_pipeline[31] <= 0.0000000000000000E+00;
        delay_pipeline[32] <= 0.0000000000000000E+00;
        delay_pipeline[33] <= 0.0000000000000000E+00;
        delay_pipeline[34] <= 0.0000000000000000E+00;
        delay_pipeline[35] <= 0.0000000000000000E+00;
        delay_pipeline[36] <= 0.0000000000000000E+00;
        delay_pipeline[37] <= 0.0000000000000000E+00;
        delay_pipeline[38] <= 0.0000000000000000E+00;
        delay_pipeline[39] <= 0.0000000000000000E+00;
        delay_pipeline[40] <= 0.0000000000000000E+00;
        delay_pipeline[41] <= 0.0000000000000000E+00;
        delay_pipeline[42] <= 0.0000000000000000E+00;
        delay_pipeline[43] <= 0.0000000000000000E+00;
        delay_pipeline[44] <= 0.0000000000000000E+00;
        delay_pipeline[45] <= 0.0000000000000000E+00;
        delay_pipeline[46] <= 0.0000000000000000E+00;
        delay_pipeline[47] <= 0.0000000000000000E+00;
        delay_pipeline[48] <= 0.0000000000000000E+00;
        delay_pipeline[49] <= 0.0000000000000000E+00;
        delay_pipeline[50] <= 0.0000000000000000E+00;
        delay_pipeline[51] <= 0.0000000000000000E+00;
        delay_pipeline[52] <= 0.0000000000000000E+00;
        delay_pipeline[53] <= 0.0000000000000000E+00;
        delay_pipeline[54] <= 0.0000000000000000E+00;
        delay_pipeline[55] <= 0.0000000000000000E+00;
        delay_pipeline[56] <= 0.0000000000000000E+00;
        delay_pipeline[57] <= 0.0000000000000000E+00;
        delay_pipeline[58] <= 0.0000000000000000E+00;
        delay_pipeline[59] <= 0.0000000000000000E+00;
        delay_pipeline[60] <= 0.0000000000000000E+00;
        delay_pipeline[61] <= 0.0000000000000000E+00;
        delay_pipeline[62] <= 0.0000000000000000E+00;
        delay_pipeline[63] <= 0.0000000000000000E+00;
        delay_pipeline[64] <= 0.0000000000000000E+00;
        delay_pipeline[65] <= 0.0000000000000000E+00;
        delay_pipeline[66] <= 0.0000000000000000E+00;
        delay_pipeline[67] <= 0.0000000000000000E+00;
        delay_pipeline[68] <= 0.0000000000000000E+00;
        delay_pipeline[69] <= 0.0000000000000000E+00;
        delay_pipeline[70] <= 0.0000000000000000E+00;
        delay_pipeline[71] <= 0.0000000000000000E+00;
        delay_pipeline[72] <= 0.0000000000000000E+00;
        delay_pipeline[73] <= 0.0000000000000000E+00;
        delay_pipeline[74] <= 0.0000000000000000E+00;
        delay_pipeline[75] <= 0.0000000000000000E+00;
        delay_pipeline[76] <= 0.0000000000000000E+00;
        delay_pipeline[77] <= 0.0000000000000000E+00;
        delay_pipeline[78] <= 0.0000000000000000E+00;
        delay_pipeline[79] <= 0.0000000000000000E+00;
        delay_pipeline[80] <= 0.0000000000000000E+00;
        delay_pipeline[81] <= 0.0000000000000000E+00;
        delay_pipeline[82] <= 0.0000000000000000E+00;
        delay_pipeline[83] <= 0.0000000000000000E+00;
        delay_pipeline[84] <= 0.0000000000000000E+00;
        delay_pipeline[85] <= 0.0000000000000000E+00;
        delay_pipeline[86] <= 0.0000000000000000E+00;
        delay_pipeline[87] <= 0.0000000000000000E+00;
        delay_pipeline[88] <= 0.0000000000000000E+00;
        delay_pipeline[89] <= 0.0000000000000000E+00;
        delay_pipeline[90] <= 0.0000000000000000E+00;
        delay_pipeline[91] <= 0.0000000000000000E+00;
        delay_pipeline[92] <= 0.0000000000000000E+00;
        delay_pipeline[93] <= 0.0000000000000000E+00;
        delay_pipeline[94] <= 0.0000000000000000E+00;
        delay_pipeline[95] <= 0.0000000000000000E+00;
        delay_pipeline[96] <= 0.0000000000000000E+00;
        delay_pipeline[97] <= 0.0000000000000000E+00;
        delay_pipeline[98] <= 0.0000000000000000E+00;
        delay_pipeline[99] <= 0.0000000000000000E+00;
        delay_pipeline[100] <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= $bitstoreal(filter_in);
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
          delay_pipeline[61] <= delay_pipeline[60];
          delay_pipeline[62] <= delay_pipeline[61];
          delay_pipeline[63] <= delay_pipeline[62];
          delay_pipeline[64] <= delay_pipeline[63];
          delay_pipeline[65] <= delay_pipeline[64];
          delay_pipeline[66] <= delay_pipeline[65];
          delay_pipeline[67] <= delay_pipeline[66];
          delay_pipeline[68] <= delay_pipeline[67];
          delay_pipeline[69] <= delay_pipeline[68];
          delay_pipeline[70] <= delay_pipeline[69];
          delay_pipeline[71] <= delay_pipeline[70];
          delay_pipeline[72] <= delay_pipeline[71];
          delay_pipeline[73] <= delay_pipeline[72];
          delay_pipeline[74] <= delay_pipeline[73];
          delay_pipeline[75] <= delay_pipeline[74];
          delay_pipeline[76] <= delay_pipeline[75];
          delay_pipeline[77] <= delay_pipeline[76];
          delay_pipeline[78] <= delay_pipeline[77];
          delay_pipeline[79] <= delay_pipeline[78];
          delay_pipeline[80] <= delay_pipeline[79];
          delay_pipeline[81] <= delay_pipeline[80];
          delay_pipeline[82] <= delay_pipeline[81];
          delay_pipeline[83] <= delay_pipeline[82];
          delay_pipeline[84] <= delay_pipeline[83];
          delay_pipeline[85] <= delay_pipeline[84];
          delay_pipeline[86] <= delay_pipeline[85];
          delay_pipeline[87] <= delay_pipeline[86];
          delay_pipeline[88] <= delay_pipeline[87];
          delay_pipeline[89] <= delay_pipeline[88];
          delay_pipeline[90] <= delay_pipeline[89];
          delay_pipeline[91] <= delay_pipeline[90];
          delay_pipeline[92] <= delay_pipeline[91];
          delay_pipeline[93] <= delay_pipeline[92];
          delay_pipeline[94] <= delay_pipeline[93];
          delay_pipeline[95] <= delay_pipeline[94];
          delay_pipeline[96] <= delay_pipeline[95];
          delay_pipeline[97] <= delay_pipeline[96];
          delay_pipeline[98] <= delay_pipeline[97];
          delay_pipeline[99] <= delay_pipeline[98];
          delay_pipeline[100] <= delay_pipeline[99];
        end
      end
    end // Delay_Pipeline_process


  always @ (posedge clk)
    begin: temp_process1
      if (reset == 1'b1) begin
        delay_pipeline_100_under_pipe <= 0.0000000000000000E+00;
        coeff101_pipe <= 0.0000000000000000E+00;
        product101_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_100_under_pipe <= delay_pipeline[100];
          coeff101_pipe <= coeff101;

          product101_pipe <= delay_pipeline_100_under_pipe * coeff101_pipe;

        end
      end
    end // temp_process1

  always @* product101 <= product101_pipe;


  always @ (posedge clk)
    begin: temp_process2
      if (reset == 1'b1) begin
        delay_pipeline_99_under_pipe <= 0.0000000000000000E+00;
        coeff100_pipe <= 0.0000000000000000E+00;
        product100_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_99_under_pipe <= delay_pipeline[99];
          coeff100_pipe <= coeff100;

          product100_pipe <= delay_pipeline_99_under_pipe * coeff100_pipe;

        end
      end
    end // temp_process2

  always @* product100 <= product100_pipe;


  always @ (posedge clk)
    begin: temp_process3
      if (reset == 1'b1) begin
        delay_pipeline_98_under_pipe <= 0.0000000000000000E+00;
        coeff99_pipe <= 0.0000000000000000E+00;
        product99_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_98_under_pipe <= delay_pipeline[98];
          coeff99_pipe <= coeff99;

          product99_pipe <= delay_pipeline_98_under_pipe * coeff99_pipe;

        end
      end
    end // temp_process3

  always @* product99 <= product99_pipe;


  always @ (posedge clk)
    begin: temp_process4
      if (reset == 1'b1) begin
        delay_pipeline_97_under_pipe <= 0.0000000000000000E+00;
        coeff98_pipe <= 0.0000000000000000E+00;
        product98_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_97_under_pipe <= delay_pipeline[97];
          coeff98_pipe <= coeff98;

          product98_pipe <= delay_pipeline_97_under_pipe * coeff98_pipe;

        end
      end
    end // temp_process4

  always @* product98 <= product98_pipe;


  always @ (posedge clk)
    begin: temp_process5
      if (reset == 1'b1) begin
        delay_pipeline_96_under_pipe <= 0.0000000000000000E+00;
        coeff97_pipe <= 0.0000000000000000E+00;
        product97_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_96_under_pipe <= delay_pipeline[96];
          coeff97_pipe <= coeff97;

          product97_pipe <= delay_pipeline_96_under_pipe * coeff97_pipe;

        end
      end
    end // temp_process5

  always @* product97 <= product97_pipe;


  always @ (posedge clk)
    begin: temp_process6
      if (reset == 1'b1) begin
        delay_pipeline_95_under_pipe <= 0.0000000000000000E+00;
        coeff96_pipe <= 0.0000000000000000E+00;
        product96_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_95_under_pipe <= delay_pipeline[95];
          coeff96_pipe <= coeff96;

          product96_pipe <= delay_pipeline_95_under_pipe * coeff96_pipe;

        end
      end
    end // temp_process6

  always @* product96 <= product96_pipe;


  always @ (posedge clk)
    begin: temp_process7
      if (reset == 1'b1) begin
        delay_pipeline_94_under_pipe <= 0.0000000000000000E+00;
        coeff95_pipe <= 0.0000000000000000E+00;
        product95_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_94_under_pipe <= delay_pipeline[94];
          coeff95_pipe <= coeff95;

          product95_pipe <= delay_pipeline_94_under_pipe * coeff95_pipe;

        end
      end
    end // temp_process7

  always @* product95 <= product95_pipe;


  always @ (posedge clk)
    begin: temp_process8
      if (reset == 1'b1) begin
        delay_pipeline_93_under_pipe <= 0.0000000000000000E+00;
        coeff94_pipe <= 0.0000000000000000E+00;
        product94_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_93_under_pipe <= delay_pipeline[93];
          coeff94_pipe <= coeff94;

          product94_pipe <= delay_pipeline_93_under_pipe * coeff94_pipe;

        end
      end
    end // temp_process8

  always @* product94 <= product94_pipe;


  always @ (posedge clk)
    begin: temp_process9
      if (reset == 1'b1) begin
        delay_pipeline_92_under_pipe <= 0.0000000000000000E+00;
        coeff93_pipe <= 0.0000000000000000E+00;
        product93_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_92_under_pipe <= delay_pipeline[92];
          coeff93_pipe <= coeff93;

          product93_pipe <= delay_pipeline_92_under_pipe * coeff93_pipe;

        end
      end
    end // temp_process9

  always @* product93 <= product93_pipe;


  always @ (posedge clk)
    begin: temp_process10
      if (reset == 1'b1) begin
        delay_pipeline_91_under_pipe <= 0.0000000000000000E+00;
        coeff92_pipe <= 0.0000000000000000E+00;
        product92_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_91_under_pipe <= delay_pipeline[91];
          coeff92_pipe <= coeff92;

          product92_pipe <= delay_pipeline_91_under_pipe * coeff92_pipe;

        end
      end
    end // temp_process10

  always @* product92 <= product92_pipe;


  always @ (posedge clk)
    begin: temp_process11
      if (reset == 1'b1) begin
        delay_pipeline_90_under_pipe <= 0.0000000000000000E+00;
        coeff91_pipe <= 0.0000000000000000E+00;
        product91_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_90_under_pipe <= delay_pipeline[90];
          coeff91_pipe <= coeff91;

          product91_pipe <= delay_pipeline_90_under_pipe * coeff91_pipe;

        end
      end
    end // temp_process11

  always @* product91 <= product91_pipe;


  always @ (posedge clk)
    begin: temp_process12
      if (reset == 1'b1) begin
        delay_pipeline_89_under_pipe <= 0.0000000000000000E+00;
        coeff90_pipe <= 0.0000000000000000E+00;
        product90_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_89_under_pipe <= delay_pipeline[89];
          coeff90_pipe <= coeff90;

          product90_pipe <= delay_pipeline_89_under_pipe * coeff90_pipe;

        end
      end
    end // temp_process12

  always @* product90 <= product90_pipe;


  always @ (posedge clk)
    begin: temp_process13
      if (reset == 1'b1) begin
        delay_pipeline_88_under_pipe <= 0.0000000000000000E+00;
        coeff89_pipe <= 0.0000000000000000E+00;
        product89_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_88_under_pipe <= delay_pipeline[88];
          coeff89_pipe <= coeff89;

          product89_pipe <= delay_pipeline_88_under_pipe * coeff89_pipe;

        end
      end
    end // temp_process13

  always @* product89 <= product89_pipe;


  always @ (posedge clk)
    begin: temp_process14
      if (reset == 1'b1) begin
        delay_pipeline_87_under_pipe <= 0.0000000000000000E+00;
        coeff88_pipe <= 0.0000000000000000E+00;
        product88_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_87_under_pipe <= delay_pipeline[87];
          coeff88_pipe <= coeff88;

          product88_pipe <= delay_pipeline_87_under_pipe * coeff88_pipe;

        end
      end
    end // temp_process14

  always @* product88 <= product88_pipe;


  always @ (posedge clk)
    begin: temp_process15
      if (reset == 1'b1) begin
        delay_pipeline_86_under_pipe <= 0.0000000000000000E+00;
        coeff87_pipe <= 0.0000000000000000E+00;
        product87_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_86_under_pipe <= delay_pipeline[86];
          coeff87_pipe <= coeff87;

          product87_pipe <= delay_pipeline_86_under_pipe * coeff87_pipe;

        end
      end
    end // temp_process15

  always @* product87 <= product87_pipe;


  always @ (posedge clk)
    begin: temp_process16
      if (reset == 1'b1) begin
        delay_pipeline_85_under_pipe <= 0.0000000000000000E+00;
        coeff86_pipe <= 0.0000000000000000E+00;
        product86_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_85_under_pipe <= delay_pipeline[85];
          coeff86_pipe <= coeff86;

          product86_pipe <= delay_pipeline_85_under_pipe * coeff86_pipe;

        end
      end
    end // temp_process16

  always @* product86 <= product86_pipe;


  always @ (posedge clk)
    begin: temp_process17
      if (reset == 1'b1) begin
        delay_pipeline_84_under_pipe <= 0.0000000000000000E+00;
        coeff85_pipe <= 0.0000000000000000E+00;
        product85_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_84_under_pipe <= delay_pipeline[84];
          coeff85_pipe <= coeff85;

          product85_pipe <= delay_pipeline_84_under_pipe * coeff85_pipe;

        end
      end
    end // temp_process17

  always @* product85 <= product85_pipe;


  always @ (posedge clk)
    begin: temp_process18
      if (reset == 1'b1) begin
        delay_pipeline_83_under_pipe <= 0.0000000000000000E+00;
        coeff84_pipe <= 0.0000000000000000E+00;
        product84_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_83_under_pipe <= delay_pipeline[83];
          coeff84_pipe <= coeff84;

          product84_pipe <= delay_pipeline_83_under_pipe * coeff84_pipe;

        end
      end
    end // temp_process18

  always @* product84 <= product84_pipe;


  always @ (posedge clk)
    begin: temp_process19
      if (reset == 1'b1) begin
        delay_pipeline_82_under_pipe <= 0.0000000000000000E+00;
        coeff83_pipe <= 0.0000000000000000E+00;
        product83_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_82_under_pipe <= delay_pipeline[82];
          coeff83_pipe <= coeff83;

          product83_pipe <= delay_pipeline_82_under_pipe * coeff83_pipe;

        end
      end
    end // temp_process19

  always @* product83 <= product83_pipe;


  always @ (posedge clk)
    begin: temp_process20
      if (reset == 1'b1) begin
        delay_pipeline_81_under_pipe <= 0.0000000000000000E+00;
        coeff82_pipe <= 0.0000000000000000E+00;
        product82_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_81_under_pipe <= delay_pipeline[81];
          coeff82_pipe <= coeff82;

          product82_pipe <= delay_pipeline_81_under_pipe * coeff82_pipe;

        end
      end
    end // temp_process20

  always @* product82 <= product82_pipe;


  always @ (posedge clk)
    begin: temp_process21
      if (reset == 1'b1) begin
        delay_pipeline_80_under_pipe <= 0.0000000000000000E+00;
        coeff81_pipe <= 0.0000000000000000E+00;
        product81_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_80_under_pipe <= delay_pipeline[80];
          coeff81_pipe <= coeff81;

          product81_pipe <= delay_pipeline_80_under_pipe * coeff81_pipe;

        end
      end
    end // temp_process21

  always @* product81 <= product81_pipe;


  always @ (posedge clk)
    begin: temp_process22
      if (reset == 1'b1) begin
        delay_pipeline_79_under_pipe <= 0.0000000000000000E+00;
        coeff80_pipe <= 0.0000000000000000E+00;
        product80_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_79_under_pipe <= delay_pipeline[79];
          coeff80_pipe <= coeff80;

          product80_pipe <= delay_pipeline_79_under_pipe * coeff80_pipe;

        end
      end
    end // temp_process22

  always @* product80 <= product80_pipe;


  always @ (posedge clk)
    begin: temp_process23
      if (reset == 1'b1) begin
        delay_pipeline_78_under_pipe <= 0.0000000000000000E+00;
        coeff79_pipe <= 0.0000000000000000E+00;
        product79_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_78_under_pipe <= delay_pipeline[78];
          coeff79_pipe <= coeff79;

          product79_pipe <= delay_pipeline_78_under_pipe * coeff79_pipe;

        end
      end
    end // temp_process23

  always @* product79 <= product79_pipe;


  always @ (posedge clk)
    begin: temp_process24
      if (reset == 1'b1) begin
        delay_pipeline_77_under_pipe <= 0.0000000000000000E+00;
        coeff78_pipe <= 0.0000000000000000E+00;
        product78_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_77_under_pipe <= delay_pipeline[77];
          coeff78_pipe <= coeff78;

          product78_pipe <= delay_pipeline_77_under_pipe * coeff78_pipe;

        end
      end
    end // temp_process24

  always @* product78 <= product78_pipe;


  always @ (posedge clk)
    begin: temp_process25
      if (reset == 1'b1) begin
        delay_pipeline_76_under_pipe <= 0.0000000000000000E+00;
        coeff77_pipe <= 0.0000000000000000E+00;
        product77_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_76_under_pipe <= delay_pipeline[76];
          coeff77_pipe <= coeff77;

          product77_pipe <= delay_pipeline_76_under_pipe * coeff77_pipe;

        end
      end
    end // temp_process25

  always @* product77 <= product77_pipe;


  always @ (posedge clk)
    begin: temp_process26
      if (reset == 1'b1) begin
        delay_pipeline_75_under_pipe <= 0.0000000000000000E+00;
        coeff76_pipe <= 0.0000000000000000E+00;
        product76_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_75_under_pipe <= delay_pipeline[75];
          coeff76_pipe <= coeff76;

          product76_pipe <= delay_pipeline_75_under_pipe * coeff76_pipe;

        end
      end
    end // temp_process26

  always @* product76 <= product76_pipe;


  always @ (posedge clk)
    begin: temp_process27
      if (reset == 1'b1) begin
        delay_pipeline_74_under_pipe <= 0.0000000000000000E+00;
        coeff75_pipe <= 0.0000000000000000E+00;
        product75_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_74_under_pipe <= delay_pipeline[74];
          coeff75_pipe <= coeff75;

          product75_pipe <= delay_pipeline_74_under_pipe * coeff75_pipe;

        end
      end
    end // temp_process27

  always @* product75 <= product75_pipe;


  always @ (posedge clk)
    begin: temp_process28
      if (reset == 1'b1) begin
        delay_pipeline_73_under_pipe <= 0.0000000000000000E+00;
        coeff74_pipe <= 0.0000000000000000E+00;
        product74_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_73_under_pipe <= delay_pipeline[73];
          coeff74_pipe <= coeff74;

          product74_pipe <= delay_pipeline_73_under_pipe * coeff74_pipe;

        end
      end
    end // temp_process28

  always @* product74 <= product74_pipe;


  always @ (posedge clk)
    begin: temp_process29
      if (reset == 1'b1) begin
        delay_pipeline_72_under_pipe <= 0.0000000000000000E+00;
        coeff73_pipe <= 0.0000000000000000E+00;
        product73_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_72_under_pipe <= delay_pipeline[72];
          coeff73_pipe <= coeff73;

          product73_pipe <= delay_pipeline_72_under_pipe * coeff73_pipe;

        end
      end
    end // temp_process29

  always @* product73 <= product73_pipe;


  always @ (posedge clk)
    begin: temp_process30
      if (reset == 1'b1) begin
        delay_pipeline_71_under_pipe <= 0.0000000000000000E+00;
        coeff72_pipe <= 0.0000000000000000E+00;
        product72_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_71_under_pipe <= delay_pipeline[71];
          coeff72_pipe <= coeff72;

          product72_pipe <= delay_pipeline_71_under_pipe * coeff72_pipe;

        end
      end
    end // temp_process30

  always @* product72 <= product72_pipe;


  always @ (posedge clk)
    begin: temp_process31
      if (reset == 1'b1) begin
        delay_pipeline_70_under_pipe <= 0.0000000000000000E+00;
        coeff71_pipe <= 0.0000000000000000E+00;
        product71_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_70_under_pipe <= delay_pipeline[70];
          coeff71_pipe <= coeff71;

          product71_pipe <= delay_pipeline_70_under_pipe * coeff71_pipe;

        end
      end
    end // temp_process31

  always @* product71 <= product71_pipe;


  always @ (posedge clk)
    begin: temp_process32
      if (reset == 1'b1) begin
        delay_pipeline_69_under_pipe <= 0.0000000000000000E+00;
        coeff70_pipe <= 0.0000000000000000E+00;
        product70_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_69_under_pipe <= delay_pipeline[69];
          coeff70_pipe <= coeff70;

          product70_pipe <= delay_pipeline_69_under_pipe * coeff70_pipe;

        end
      end
    end // temp_process32

  always @* product70 <= product70_pipe;


  always @ (posedge clk)
    begin: temp_process33
      if (reset == 1'b1) begin
        delay_pipeline_68_under_pipe <= 0.0000000000000000E+00;
        coeff69_pipe <= 0.0000000000000000E+00;
        product69_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_68_under_pipe <= delay_pipeline[68];
          coeff69_pipe <= coeff69;

          product69_pipe <= delay_pipeline_68_under_pipe * coeff69_pipe;

        end
      end
    end // temp_process33

  always @* product69 <= product69_pipe;


  always @ (posedge clk)
    begin: temp_process34
      if (reset == 1'b1) begin
        delay_pipeline_67_under_pipe <= 0.0000000000000000E+00;
        coeff68_pipe <= 0.0000000000000000E+00;
        product68_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_67_under_pipe <= delay_pipeline[67];
          coeff68_pipe <= coeff68;

          product68_pipe <= delay_pipeline_67_under_pipe * coeff68_pipe;

        end
      end
    end // temp_process34

  always @* product68 <= product68_pipe;


  always @ (posedge clk)
    begin: temp_process35
      if (reset == 1'b1) begin
        delay_pipeline_66_under_pipe <= 0.0000000000000000E+00;
        coeff67_pipe <= 0.0000000000000000E+00;
        product67_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_66_under_pipe <= delay_pipeline[66];
          coeff67_pipe <= coeff67;

          product67_pipe <= delay_pipeline_66_under_pipe * coeff67_pipe;

        end
      end
    end // temp_process35

  always @* product67 <= product67_pipe;


  always @ (posedge clk)
    begin: temp_process36
      if (reset == 1'b1) begin
        delay_pipeline_65_under_pipe <= 0.0000000000000000E+00;
        coeff66_pipe <= 0.0000000000000000E+00;
        product66_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_65_under_pipe <= delay_pipeline[65];
          coeff66_pipe <= coeff66;

          product66_pipe <= delay_pipeline_65_under_pipe * coeff66_pipe;

        end
      end
    end // temp_process36

  always @* product66 <= product66_pipe;


  always @ (posedge clk)
    begin: temp_process37
      if (reset == 1'b1) begin
        delay_pipeline_64_under_pipe <= 0.0000000000000000E+00;
        coeff65_pipe <= 0.0000000000000000E+00;
        product65_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_64_under_pipe <= delay_pipeline[64];
          coeff65_pipe <= coeff65;

          product65_pipe <= delay_pipeline_64_under_pipe * coeff65_pipe;

        end
      end
    end // temp_process37

  always @* product65 <= product65_pipe;


  always @ (posedge clk)
    begin: temp_process38
      if (reset == 1'b1) begin
        delay_pipeline_63_under_pipe <= 0.0000000000000000E+00;
        coeff64_pipe <= 0.0000000000000000E+00;
        product64_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_63_under_pipe <= delay_pipeline[63];
          coeff64_pipe <= coeff64;

          product64_pipe <= delay_pipeline_63_under_pipe * coeff64_pipe;

        end
      end
    end // temp_process38

  always @* product64 <= product64_pipe;


  always @ (posedge clk)
    begin: temp_process39
      if (reset == 1'b1) begin
        delay_pipeline_62_under_pipe <= 0.0000000000000000E+00;
        coeff63_pipe <= 0.0000000000000000E+00;
        product63_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_62_under_pipe <= delay_pipeline[62];
          coeff63_pipe <= coeff63;

          product63_pipe <= delay_pipeline_62_under_pipe * coeff63_pipe;

        end
      end
    end // temp_process39

  always @* product63 <= product63_pipe;


  always @ (posedge clk)
    begin: temp_process40
      if (reset == 1'b1) begin
        delay_pipeline_61_under_pipe <= 0.0000000000000000E+00;
        coeff62_pipe <= 0.0000000000000000E+00;
        product62_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_61_under_pipe <= delay_pipeline[61];
          coeff62_pipe <= coeff62;

          product62_pipe <= delay_pipeline_61_under_pipe * coeff62_pipe;

        end
      end
    end // temp_process40

  always @* product62 <= product62_pipe;


  always @ (posedge clk)
    begin: temp_process41
      if (reset == 1'b1) begin
        delay_pipeline_60_under_pipe <= 0.0000000000000000E+00;
        coeff61_pipe <= 0.0000000000000000E+00;
        product61_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_60_under_pipe <= delay_pipeline[60];
          coeff61_pipe <= coeff61;

          product61_pipe <= delay_pipeline_60_under_pipe * coeff61_pipe;

        end
      end
    end // temp_process41

  always @* product61 <= product61_pipe;


  always @ (posedge clk)
    begin: temp_process42
      if (reset == 1'b1) begin
        delay_pipeline_59_under_pipe <= 0.0000000000000000E+00;
        coeff60_pipe <= 0.0000000000000000E+00;
        product60_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_59_under_pipe <= delay_pipeline[59];
          coeff60_pipe <= coeff60;

          product60_pipe <= delay_pipeline_59_under_pipe * coeff60_pipe;

        end
      end
    end // temp_process42

  always @* product60 <= product60_pipe;


  always @ (posedge clk)
    begin: temp_process43
      if (reset == 1'b1) begin
        delay_pipeline_58_under_pipe <= 0.0000000000000000E+00;
        coeff59_pipe <= 0.0000000000000000E+00;
        product59_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_58_under_pipe <= delay_pipeline[58];
          coeff59_pipe <= coeff59;

          product59_pipe <= delay_pipeline_58_under_pipe * coeff59_pipe;

        end
      end
    end // temp_process43

  always @* product59 <= product59_pipe;


  always @ (posedge clk)
    begin: temp_process44
      if (reset == 1'b1) begin
        delay_pipeline_57_under_pipe <= 0.0000000000000000E+00;
        coeff58_pipe <= 0.0000000000000000E+00;
        product58_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_57_under_pipe <= delay_pipeline[57];
          coeff58_pipe <= coeff58;

          product58_pipe <= delay_pipeline_57_under_pipe * coeff58_pipe;

        end
      end
    end // temp_process44

  always @* product58 <= product58_pipe;


  always @ (posedge clk)
    begin: temp_process45
      if (reset == 1'b1) begin
        delay_pipeline_56_under_pipe <= 0.0000000000000000E+00;
        coeff57_pipe <= 0.0000000000000000E+00;
        product57_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_56_under_pipe <= delay_pipeline[56];
          coeff57_pipe <= coeff57;

          product57_pipe <= delay_pipeline_56_under_pipe * coeff57_pipe;

        end
      end
    end // temp_process45

  always @* product57 <= product57_pipe;


  always @ (posedge clk)
    begin: temp_process46
      if (reset == 1'b1) begin
        delay_pipeline_55_under_pipe <= 0.0000000000000000E+00;
        coeff56_pipe <= 0.0000000000000000E+00;
        product56_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_55_under_pipe <= delay_pipeline[55];
          coeff56_pipe <= coeff56;

          product56_pipe <= delay_pipeline_55_under_pipe * coeff56_pipe;

        end
      end
    end // temp_process46

  always @* product56 <= product56_pipe;


  always @ (posedge clk)
    begin: temp_process47
      if (reset == 1'b1) begin
        delay_pipeline_54_under_pipe <= 0.0000000000000000E+00;
        coeff55_pipe <= 0.0000000000000000E+00;
        product55_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_54_under_pipe <= delay_pipeline[54];
          coeff55_pipe <= coeff55;

          product55_pipe <= delay_pipeline_54_under_pipe * coeff55_pipe;

        end
      end
    end // temp_process47

  always @* product55 <= product55_pipe;


  always @ (posedge clk)
    begin: temp_process48
      if (reset == 1'b1) begin
        delay_pipeline_53_under_pipe <= 0.0000000000000000E+00;
        coeff54_pipe <= 0.0000000000000000E+00;
        product54_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_53_under_pipe <= delay_pipeline[53];
          coeff54_pipe <= coeff54;

          product54_pipe <= delay_pipeline_53_under_pipe * coeff54_pipe;

        end
      end
    end // temp_process48

  always @* product54 <= product54_pipe;


  always @ (posedge clk)
    begin: temp_process49
      if (reset == 1'b1) begin
        delay_pipeline_52_under_pipe <= 0.0000000000000000E+00;
        coeff53_pipe <= 0.0000000000000000E+00;
        product53_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_52_under_pipe <= delay_pipeline[52];
          coeff53_pipe <= coeff53;

          product53_pipe <= delay_pipeline_52_under_pipe * coeff53_pipe;

        end
      end
    end // temp_process49

  always @* product53 <= product53_pipe;


  always @ (posedge clk)
    begin: temp_process50
      if (reset == 1'b1) begin
        delay_pipeline_51_under_pipe <= 0.0000000000000000E+00;
        coeff52_pipe <= 0.0000000000000000E+00;
        product52_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_51_under_pipe <= delay_pipeline[51];
          coeff52_pipe <= coeff52;

          product52_pipe <= delay_pipeline_51_under_pipe * coeff52_pipe;

        end
      end
    end // temp_process50

  always @* product52 <= product52_pipe;


  always @ (posedge clk)
    begin: temp_process51
      if (reset == 1'b1) begin
        delay_pipeline_50_under_pipe <= 0.0000000000000000E+00;
        coeff51_pipe <= 0.0000000000000000E+00;
        product51_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_50_under_pipe <= delay_pipeline[50];
          coeff51_pipe <= coeff51;

          product51_pipe <= delay_pipeline_50_under_pipe * coeff51_pipe;

        end
      end
    end // temp_process51

  always @* product51 <= product51_pipe;


  always @ (posedge clk)
    begin: temp_process52
      if (reset == 1'b1) begin
        delay_pipeline_49_under_pipe <= 0.0000000000000000E+00;
        coeff50_pipe <= 0.0000000000000000E+00;
        product50_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_49_under_pipe <= delay_pipeline[49];
          coeff50_pipe <= coeff50;

          product50_pipe <= delay_pipeline_49_under_pipe * coeff50_pipe;

        end
      end
    end // temp_process52

  always @* product50 <= product50_pipe;


  always @ (posedge clk)
    begin: temp_process53
      if (reset == 1'b1) begin
        delay_pipeline_48_under_pipe <= 0.0000000000000000E+00;
        coeff49_pipe <= 0.0000000000000000E+00;
        product49_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_48_under_pipe <= delay_pipeline[48];
          coeff49_pipe <= coeff49;

          product49_pipe <= delay_pipeline_48_under_pipe * coeff49_pipe;

        end
      end
    end // temp_process53

  always @* product49 <= product49_pipe;


  always @ (posedge clk)
    begin: temp_process54
      if (reset == 1'b1) begin
        delay_pipeline_47_under_pipe <= 0.0000000000000000E+00;
        coeff48_pipe <= 0.0000000000000000E+00;
        product48_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_47_under_pipe <= delay_pipeline[47];
          coeff48_pipe <= coeff48;

          product48_pipe <= delay_pipeline_47_under_pipe * coeff48_pipe;

        end
      end
    end // temp_process54

  always @* product48 <= product48_pipe;


  always @ (posedge clk)
    begin: temp_process55
      if (reset == 1'b1) begin
        delay_pipeline_46_under_pipe <= 0.0000000000000000E+00;
        coeff47_pipe <= 0.0000000000000000E+00;
        product47_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_46_under_pipe <= delay_pipeline[46];
          coeff47_pipe <= coeff47;

          product47_pipe <= delay_pipeline_46_under_pipe * coeff47_pipe;

        end
      end
    end // temp_process55

  always @* product47 <= product47_pipe;


  always @ (posedge clk)
    begin: temp_process56
      if (reset == 1'b1) begin
        delay_pipeline_45_under_pipe <= 0.0000000000000000E+00;
        coeff46_pipe <= 0.0000000000000000E+00;
        product46_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_45_under_pipe <= delay_pipeline[45];
          coeff46_pipe <= coeff46;

          product46_pipe <= delay_pipeline_45_under_pipe * coeff46_pipe;

        end
      end
    end // temp_process56

  always @* product46 <= product46_pipe;


  always @ (posedge clk)
    begin: temp_process57
      if (reset == 1'b1) begin
        delay_pipeline_44_under_pipe <= 0.0000000000000000E+00;
        coeff45_pipe <= 0.0000000000000000E+00;
        product45_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_44_under_pipe <= delay_pipeline[44];
          coeff45_pipe <= coeff45;

          product45_pipe <= delay_pipeline_44_under_pipe * coeff45_pipe;

        end
      end
    end // temp_process57

  always @* product45 <= product45_pipe;


  always @ (posedge clk)
    begin: temp_process58
      if (reset == 1'b1) begin
        delay_pipeline_43_under_pipe <= 0.0000000000000000E+00;
        coeff44_pipe <= 0.0000000000000000E+00;
        product44_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_43_under_pipe <= delay_pipeline[43];
          coeff44_pipe <= coeff44;

          product44_pipe <= delay_pipeline_43_under_pipe * coeff44_pipe;

        end
      end
    end // temp_process58

  always @* product44 <= product44_pipe;


  always @ (posedge clk)
    begin: temp_process59
      if (reset == 1'b1) begin
        delay_pipeline_42_under_pipe <= 0.0000000000000000E+00;
        coeff43_pipe <= 0.0000000000000000E+00;
        product43_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_42_under_pipe <= delay_pipeline[42];
          coeff43_pipe <= coeff43;

          product43_pipe <= delay_pipeline_42_under_pipe * coeff43_pipe;

        end
      end
    end // temp_process59

  always @* product43 <= product43_pipe;


  always @ (posedge clk)
    begin: temp_process60
      if (reset == 1'b1) begin
        delay_pipeline_41_under_pipe <= 0.0000000000000000E+00;
        coeff42_pipe <= 0.0000000000000000E+00;
        product42_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_41_under_pipe <= delay_pipeline[41];
          coeff42_pipe <= coeff42;

          product42_pipe <= delay_pipeline_41_under_pipe * coeff42_pipe;

        end
      end
    end // temp_process60

  always @* product42 <= product42_pipe;


  always @ (posedge clk)
    begin: temp_process61
      if (reset == 1'b1) begin
        delay_pipeline_40_under_pipe <= 0.0000000000000000E+00;
        coeff41_pipe <= 0.0000000000000000E+00;
        product41_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_40_under_pipe <= delay_pipeline[40];
          coeff41_pipe <= coeff41;

          product41_pipe <= delay_pipeline_40_under_pipe * coeff41_pipe;

        end
      end
    end // temp_process61

  always @* product41 <= product41_pipe;


  always @ (posedge clk)
    begin: temp_process62
      if (reset == 1'b1) begin
        delay_pipeline_39_under_pipe <= 0.0000000000000000E+00;
        coeff40_pipe <= 0.0000000000000000E+00;
        product40_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_39_under_pipe <= delay_pipeline[39];
          coeff40_pipe <= coeff40;

          product40_pipe <= delay_pipeline_39_under_pipe * coeff40_pipe;

        end
      end
    end // temp_process62

  always @* product40 <= product40_pipe;


  always @ (posedge clk)
    begin: temp_process63
      if (reset == 1'b1) begin
        delay_pipeline_38_under_pipe <= 0.0000000000000000E+00;
        coeff39_pipe <= 0.0000000000000000E+00;
        product39_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_38_under_pipe <= delay_pipeline[38];
          coeff39_pipe <= coeff39;

          product39_pipe <= delay_pipeline_38_under_pipe * coeff39_pipe;

        end
      end
    end // temp_process63

  always @* product39 <= product39_pipe;


  always @ (posedge clk)
    begin: temp_process64
      if (reset == 1'b1) begin
        delay_pipeline_37_under_pipe <= 0.0000000000000000E+00;
        coeff38_pipe <= 0.0000000000000000E+00;
        product38_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_37_under_pipe <= delay_pipeline[37];
          coeff38_pipe <= coeff38;

          product38_pipe <= delay_pipeline_37_under_pipe * coeff38_pipe;

        end
      end
    end // temp_process64

  always @* product38 <= product38_pipe;


  always @ (posedge clk)
    begin: temp_process65
      if (reset == 1'b1) begin
        delay_pipeline_36_under_pipe <= 0.0000000000000000E+00;
        coeff37_pipe <= 0.0000000000000000E+00;
        product37_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_36_under_pipe <= delay_pipeline[36];
          coeff37_pipe <= coeff37;

          product37_pipe <= delay_pipeline_36_under_pipe * coeff37_pipe;

        end
      end
    end // temp_process65

  always @* product37 <= product37_pipe;


  always @ (posedge clk)
    begin: temp_process66
      if (reset == 1'b1) begin
        delay_pipeline_35_under_pipe <= 0.0000000000000000E+00;
        coeff36_pipe <= 0.0000000000000000E+00;
        product36_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_35_under_pipe <= delay_pipeline[35];
          coeff36_pipe <= coeff36;

          product36_pipe <= delay_pipeline_35_under_pipe * coeff36_pipe;

        end
      end
    end // temp_process66

  always @* product36 <= product36_pipe;


  always @ (posedge clk)
    begin: temp_process67
      if (reset == 1'b1) begin
        delay_pipeline_34_under_pipe <= 0.0000000000000000E+00;
        coeff35_pipe <= 0.0000000000000000E+00;
        product35_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_34_under_pipe <= delay_pipeline[34];
          coeff35_pipe <= coeff35;

          product35_pipe <= delay_pipeline_34_under_pipe * coeff35_pipe;

        end
      end
    end // temp_process67

  always @* product35 <= product35_pipe;


  always @ (posedge clk)
    begin: temp_process68
      if (reset == 1'b1) begin
        delay_pipeline_33_under_pipe <= 0.0000000000000000E+00;
        coeff34_pipe <= 0.0000000000000000E+00;
        product34_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_33_under_pipe <= delay_pipeline[33];
          coeff34_pipe <= coeff34;

          product34_pipe <= delay_pipeline_33_under_pipe * coeff34_pipe;

        end
      end
    end // temp_process68

  always @* product34 <= product34_pipe;


  always @ (posedge clk)
    begin: temp_process69
      if (reset == 1'b1) begin
        delay_pipeline_32_under_pipe <= 0.0000000000000000E+00;
        coeff33_pipe <= 0.0000000000000000E+00;
        product33_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_32_under_pipe <= delay_pipeline[32];
          coeff33_pipe <= coeff33;

          product33_pipe <= delay_pipeline_32_under_pipe * coeff33_pipe;

        end
      end
    end // temp_process69

  always @* product33 <= product33_pipe;


  always @ (posedge clk)
    begin: temp_process70
      if (reset == 1'b1) begin
        delay_pipeline_31_under_pipe <= 0.0000000000000000E+00;
        coeff32_pipe <= 0.0000000000000000E+00;
        product32_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_31_under_pipe <= delay_pipeline[31];
          coeff32_pipe <= coeff32;

          product32_pipe <= delay_pipeline_31_under_pipe * coeff32_pipe;

        end
      end
    end // temp_process70

  always @* product32 <= product32_pipe;


  always @ (posedge clk)
    begin: temp_process71
      if (reset == 1'b1) begin
        delay_pipeline_30_under_pipe <= 0.0000000000000000E+00;
        coeff31_pipe <= 0.0000000000000000E+00;
        product31_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_30_under_pipe <= delay_pipeline[30];
          coeff31_pipe <= coeff31;

          product31_pipe <= delay_pipeline_30_under_pipe * coeff31_pipe;

        end
      end
    end // temp_process71

  always @* product31 <= product31_pipe;


  always @ (posedge clk)
    begin: temp_process72
      if (reset == 1'b1) begin
        delay_pipeline_29_under_pipe <= 0.0000000000000000E+00;
        coeff30_pipe <= 0.0000000000000000E+00;
        product30_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_29_under_pipe <= delay_pipeline[29];
          coeff30_pipe <= coeff30;

          product30_pipe <= delay_pipeline_29_under_pipe * coeff30_pipe;

        end
      end
    end // temp_process72

  always @* product30 <= product30_pipe;


  always @ (posedge clk)
    begin: temp_process73
      if (reset == 1'b1) begin
        delay_pipeline_28_under_pipe <= 0.0000000000000000E+00;
        coeff29_pipe <= 0.0000000000000000E+00;
        product29_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_28_under_pipe <= delay_pipeline[28];
          coeff29_pipe <= coeff29;

          product29_pipe <= delay_pipeline_28_under_pipe * coeff29_pipe;

        end
      end
    end // temp_process73

  always @* product29 <= product29_pipe;


  always @ (posedge clk)
    begin: temp_process74
      if (reset == 1'b1) begin
        delay_pipeline_27_under_pipe <= 0.0000000000000000E+00;
        coeff28_pipe <= 0.0000000000000000E+00;
        product28_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_27_under_pipe <= delay_pipeline[27];
          coeff28_pipe <= coeff28;

          product28_pipe <= delay_pipeline_27_under_pipe * coeff28_pipe;

        end
      end
    end // temp_process74

  always @* product28 <= product28_pipe;


  always @ (posedge clk)
    begin: temp_process75
      if (reset == 1'b1) begin
        delay_pipeline_26_under_pipe <= 0.0000000000000000E+00;
        coeff27_pipe <= 0.0000000000000000E+00;
        product27_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_26_under_pipe <= delay_pipeline[26];
          coeff27_pipe <= coeff27;

          product27_pipe <= delay_pipeline_26_under_pipe * coeff27_pipe;

        end
      end
    end // temp_process75

  always @* product27 <= product27_pipe;


  always @ (posedge clk)
    begin: temp_process76
      if (reset == 1'b1) begin
        delay_pipeline_25_under_pipe <= 0.0000000000000000E+00;
        coeff26_pipe <= 0.0000000000000000E+00;
        product26_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_25_under_pipe <= delay_pipeline[25];
          coeff26_pipe <= coeff26;

          product26_pipe <= delay_pipeline_25_under_pipe * coeff26_pipe;

        end
      end
    end // temp_process76

  always @* product26 <= product26_pipe;


  always @ (posedge clk)
    begin: temp_process77
      if (reset == 1'b1) begin
        delay_pipeline_24_under_pipe <= 0.0000000000000000E+00;
        coeff25_pipe <= 0.0000000000000000E+00;
        product25_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_24_under_pipe <= delay_pipeline[24];
          coeff25_pipe <= coeff25;

          product25_pipe <= delay_pipeline_24_under_pipe * coeff25_pipe;

        end
      end
    end // temp_process77

  always @* product25 <= product25_pipe;


  always @ (posedge clk)
    begin: temp_process78
      if (reset == 1'b1) begin
        delay_pipeline_23_under_pipe <= 0.0000000000000000E+00;
        coeff24_pipe <= 0.0000000000000000E+00;
        product24_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_23_under_pipe <= delay_pipeline[23];
          coeff24_pipe <= coeff24;

          product24_pipe <= delay_pipeline_23_under_pipe * coeff24_pipe;

        end
      end
    end // temp_process78

  always @* product24 <= product24_pipe;


  always @ (posedge clk)
    begin: temp_process79
      if (reset == 1'b1) begin
        delay_pipeline_22_under_pipe <= 0.0000000000000000E+00;
        coeff23_pipe <= 0.0000000000000000E+00;
        product23_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_22_under_pipe <= delay_pipeline[22];
          coeff23_pipe <= coeff23;

          product23_pipe <= delay_pipeline_22_under_pipe * coeff23_pipe;

        end
      end
    end // temp_process79

  always @* product23 <= product23_pipe;


  always @ (posedge clk)
    begin: temp_process80
      if (reset == 1'b1) begin
        delay_pipeline_21_under_pipe <= 0.0000000000000000E+00;
        coeff22_pipe <= 0.0000000000000000E+00;
        product22_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_21_under_pipe <= delay_pipeline[21];
          coeff22_pipe <= coeff22;

          product22_pipe <= delay_pipeline_21_under_pipe * coeff22_pipe;

        end
      end
    end // temp_process80

  always @* product22 <= product22_pipe;


  always @ (posedge clk)
    begin: temp_process81
      if (reset == 1'b1) begin
        delay_pipeline_20_under_pipe <= 0.0000000000000000E+00;
        coeff21_pipe <= 0.0000000000000000E+00;
        product21_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_20_under_pipe <= delay_pipeline[20];
          coeff21_pipe <= coeff21;

          product21_pipe <= delay_pipeline_20_under_pipe * coeff21_pipe;

        end
      end
    end // temp_process81

  always @* product21 <= product21_pipe;


  always @ (posedge clk)
    begin: temp_process82
      if (reset == 1'b1) begin
        delay_pipeline_19_under_pipe <= 0.0000000000000000E+00;
        coeff20_pipe <= 0.0000000000000000E+00;
        product20_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_19_under_pipe <= delay_pipeline[19];
          coeff20_pipe <= coeff20;

          product20_pipe <= delay_pipeline_19_under_pipe * coeff20_pipe;

        end
      end
    end // temp_process82

  always @* product20 <= product20_pipe;


  always @ (posedge clk)
    begin: temp_process83
      if (reset == 1'b1) begin
        delay_pipeline_18_under_pipe <= 0.0000000000000000E+00;
        coeff19_pipe <= 0.0000000000000000E+00;
        product19_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_18_under_pipe <= delay_pipeline[18];
          coeff19_pipe <= coeff19;

          product19_pipe <= delay_pipeline_18_under_pipe * coeff19_pipe;

        end
      end
    end // temp_process83

  always @* product19 <= product19_pipe;


  always @ (posedge clk)
    begin: temp_process84
      if (reset == 1'b1) begin
        delay_pipeline_17_under_pipe <= 0.0000000000000000E+00;
        coeff18_pipe <= 0.0000000000000000E+00;
        product18_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_17_under_pipe <= delay_pipeline[17];
          coeff18_pipe <= coeff18;

          product18_pipe <= delay_pipeline_17_under_pipe * coeff18_pipe;

        end
      end
    end // temp_process84

  always @* product18 <= product18_pipe;


  always @ (posedge clk)
    begin: temp_process85
      if (reset == 1'b1) begin
        delay_pipeline_16_under_pipe <= 0.0000000000000000E+00;
        coeff17_pipe <= 0.0000000000000000E+00;
        product17_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_16_under_pipe <= delay_pipeline[16];
          coeff17_pipe <= coeff17;

          product17_pipe <= delay_pipeline_16_under_pipe * coeff17_pipe;

        end
      end
    end // temp_process85

  always @* product17 <= product17_pipe;


  always @ (posedge clk)
    begin: temp_process86
      if (reset == 1'b1) begin
        delay_pipeline_15_under_pipe <= 0.0000000000000000E+00;
        coeff16_pipe <= 0.0000000000000000E+00;
        product16_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_15_under_pipe <= delay_pipeline[15];
          coeff16_pipe <= coeff16;

          product16_pipe <= delay_pipeline_15_under_pipe * coeff16_pipe;

        end
      end
    end // temp_process86

  always @* product16 <= product16_pipe;


  always @ (posedge clk)
    begin: temp_process87
      if (reset == 1'b1) begin
        delay_pipeline_14_under_pipe <= 0.0000000000000000E+00;
        coeff15_pipe <= 0.0000000000000000E+00;
        product15_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_14_under_pipe <= delay_pipeline[14];
          coeff15_pipe <= coeff15;

          product15_pipe <= delay_pipeline_14_under_pipe * coeff15_pipe;

        end
      end
    end // temp_process87

  always @* product15 <= product15_pipe;


  always @ (posedge clk)
    begin: temp_process88
      if (reset == 1'b1) begin
        delay_pipeline_13_under_pipe <= 0.0000000000000000E+00;
        coeff14_pipe <= 0.0000000000000000E+00;
        product14_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_13_under_pipe <= delay_pipeline[13];
          coeff14_pipe <= coeff14;

          product14_pipe <= delay_pipeline_13_under_pipe * coeff14_pipe;

        end
      end
    end // temp_process88

  always @* product14 <= product14_pipe;


  always @ (posedge clk)
    begin: temp_process89
      if (reset == 1'b1) begin
        delay_pipeline_12_under_pipe <= 0.0000000000000000E+00;
        coeff13_pipe <= 0.0000000000000000E+00;
        product13_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_12_under_pipe <= delay_pipeline[12];
          coeff13_pipe <= coeff13;

          product13_pipe <= delay_pipeline_12_under_pipe * coeff13_pipe;

        end
      end
    end // temp_process89

  always @* product13 <= product13_pipe;


  always @ (posedge clk)
    begin: temp_process90
      if (reset == 1'b1) begin
        delay_pipeline_11_under_pipe <= 0.0000000000000000E+00;
        coeff12_pipe <= 0.0000000000000000E+00;
        product12_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_11_under_pipe <= delay_pipeline[11];
          coeff12_pipe <= coeff12;

          product12_pipe <= delay_pipeline_11_under_pipe * coeff12_pipe;

        end
      end
    end // temp_process90

  always @* product12 <= product12_pipe;


  always @ (posedge clk)
    begin: temp_process91
      if (reset == 1'b1) begin
        delay_pipeline_10_under_pipe <= 0.0000000000000000E+00;
        coeff11_pipe <= 0.0000000000000000E+00;
        product11_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_10_under_pipe <= delay_pipeline[10];
          coeff11_pipe <= coeff11;

          product11_pipe <= delay_pipeline_10_under_pipe * coeff11_pipe;

        end
      end
    end // temp_process91

  always @* product11 <= product11_pipe;


  always @ (posedge clk)
    begin: temp_process92
      if (reset == 1'b1) begin
        delay_pipeline_9_under_pipe <= 0.0000000000000000E+00;
        coeff10_pipe <= 0.0000000000000000E+00;
        product10_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_9_under_pipe <= delay_pipeline[9];
          coeff10_pipe <= coeff10;

          product10_pipe <= delay_pipeline_9_under_pipe * coeff10_pipe;

        end
      end
    end // temp_process92

  always @* product10 <= product10_pipe;


  always @ (posedge clk)
    begin: temp_process93
      if (reset == 1'b1) begin
        delay_pipeline_8_under_pipe <= 0.0000000000000000E+00;
        coeff9_pipe <= 0.0000000000000000E+00;
        product9_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_8_under_pipe <= delay_pipeline[8];
          coeff9_pipe <= coeff9;

          product9_pipe <= delay_pipeline_8_under_pipe * coeff9_pipe;

        end
      end
    end // temp_process93

  always @* product9 <= product9_pipe;


  always @ (posedge clk)
    begin: temp_process94
      if (reset == 1'b1) begin
        delay_pipeline_7_under_pipe <= 0.0000000000000000E+00;
        coeff8_pipe <= 0.0000000000000000E+00;
        product8_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_7_under_pipe <= delay_pipeline[7];
          coeff8_pipe <= coeff8;

          product8_pipe <= delay_pipeline_7_under_pipe * coeff8_pipe;

        end
      end
    end // temp_process94

  always @* product8 <= product8_pipe;


  always @ (posedge clk)
    begin: temp_process95
      if (reset == 1'b1) begin
        delay_pipeline_6_under_pipe <= 0.0000000000000000E+00;
        coeff7_pipe <= 0.0000000000000000E+00;
        product7_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_6_under_pipe <= delay_pipeline[6];
          coeff7_pipe <= coeff7;

          product7_pipe <= delay_pipeline_6_under_pipe * coeff7_pipe;

        end
      end
    end // temp_process95

  always @* product7 <= product7_pipe;


  always @ (posedge clk)
    begin: temp_process96
      if (reset == 1'b1) begin
        delay_pipeline_5_under_pipe <= 0.0000000000000000E+00;
        coeff6_pipe <= 0.0000000000000000E+00;
        product6_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_5_under_pipe <= delay_pipeline[5];
          coeff6_pipe <= coeff6;

          product6_pipe <= delay_pipeline_5_under_pipe * coeff6_pipe;

        end
      end
    end // temp_process96

  always @* product6 <= product6_pipe;


  always @ (posedge clk)
    begin: temp_process97
      if (reset == 1'b1) begin
        delay_pipeline_4_under_pipe <= 0.0000000000000000E+00;
        coeff5_pipe <= 0.0000000000000000E+00;
        product5_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_4_under_pipe <= delay_pipeline[4];
          coeff5_pipe <= coeff5;

          product5_pipe <= delay_pipeline_4_under_pipe * coeff5_pipe;

        end
      end
    end // temp_process97

  always @* product5 <= product5_pipe;


  always @ (posedge clk)
    begin: temp_process98
      if (reset == 1'b1) begin
        delay_pipeline_3_under_pipe <= 0.0000000000000000E+00;
        coeff4_pipe <= 0.0000000000000000E+00;
        product4_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_3_under_pipe <= delay_pipeline[3];
          coeff4_pipe <= coeff4;

          product4_pipe <= delay_pipeline_3_under_pipe * coeff4_pipe;

        end
      end
    end // temp_process98

  always @* product4 <= product4_pipe;


  always @ (posedge clk)
    begin: temp_process99
      if (reset == 1'b1) begin
        delay_pipeline_2_under_pipe <= 0.0000000000000000E+00;
        coeff3_pipe <= 0.0000000000000000E+00;
        product3_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_2_under_pipe <= delay_pipeline[2];
          coeff3_pipe <= coeff3;

          product3_pipe <= delay_pipeline_2_under_pipe * coeff3_pipe;

        end
      end
    end // temp_process99

  always @* product3 <= product3_pipe;


  always @ (posedge clk)
    begin: temp_process100
      if (reset == 1'b1) begin
        delay_pipeline_1_under_pipe <= 0.0000000000000000E+00;
        coeff2_pipe <= 0.0000000000000000E+00;
        product2_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_1_under_pipe <= delay_pipeline[1];
          coeff2_pipe <= coeff2;

          product2_pipe <= delay_pipeline_1_under_pipe * coeff2_pipe;

        end
      end
    end // temp_process100

  always @* product2 <= product2_pipe;


  always @ (posedge clk)
    begin: temp_process101
      if (reset == 1'b1) begin
        delay_pipeline_0_under_pipe <= 0.0000000000000000E+00;
        coeff1_pipe <= 0.0000000000000000E+00;
        product1_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_0_under_pipe <= delay_pipeline[0];
          coeff1_pipe <= coeff1;

          product1_pipe <= delay_pipeline_0_under_pipe * coeff1_pipe;

        end
      end
    end // temp_process101

  always @* product1 <= product1_pipe;


  always @* sum1_1 <= product101 + product100;

  always @* sum1_2 <= product99 + product98;

  always @* sum1_3 <= product97 + product96;

  always @* sum1_4 <= product95 + product94;

  always @* sum1_5 <= product93 + product92;

  always @* sum1_6 <= product91 + product90;

  always @* sum1_7 <= product89 + product88;

  always @* sum1_8 <= product87 + product86;

  always @* sum1_9 <= product85 + product84;

  always @* sum1_10 <= product83 + product82;

  always @* sum1_11 <= product81 + product80;

  always @* sum1_12 <= product79 + product78;

  always @* sum1_13 <= product77 + product76;

  always @* sum1_14 <= product75 + product74;

  always @* sum1_15 <= product73 + product72;

  always @* sum1_16 <= product71 + product70;

  always @* sum1_17 <= product69 + product68;

  always @* sum1_18 <= product67 + product66;

  always @* sum1_19 <= product65 + product64;

  always @* sum1_20 <= product63 + product62;

  always @* sum1_21 <= product61 + product60;

  always @* sum1_22 <= product59 + product58;

  always @* sum1_23 <= product57 + product56;

  always @* sum1_24 <= product55 + product54;

  always @* sum1_25 <= product53 + product52;

  always @* sum1_26 <= product51 + product50;

  always @* sum1_27 <= product49 + product48;

  always @* sum1_28 <= product47 + product46;

  always @* sum1_29 <= product45 + product44;

  always @* sum1_30 <= product43 + product42;

  always @* sum1_31 <= product41 + product40;

  always @* sum1_32 <= product39 + product38;

  always @* sum1_33 <= product37 + product36;

  always @* sum1_34 <= product35 + product34;

  always @* sum1_35 <= product33 + product32;

  always @* sum1_36 <= product31 + product30;

  always @* sum1_37 <= product29 + product28;

  always @* sum1_38 <= product27 + product26;

  always @* sum1_39 <= product25 + product24;

  always @* sum1_40 <= product23 + product22;

  always @* sum1_41 <= product21 + product20;

  always @* sum1_42 <= product19 + product18;

  always @* sum1_43 <= product17 + product16;

  always @* sum1_44 <= product15 + product14;

  always @* sum1_45 <= product13 + product12;

  always @* sum1_46 <= product11 + product10;

  always @* sum1_47 <= product9 + product8;

  always @* sum1_48 <= product7 + product6;

  always @* sum1_49 <= product5 + product4;

  always @* sum1_50 <= product3 + product2;

  always @ ( posedge clk)
    begin: temp_process102
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0.0000000000000000E+00;
        sumpipe1_2 <= 0.0000000000000000E+00;
        sumpipe1_3 <= 0.0000000000000000E+00;
        sumpipe1_4 <= 0.0000000000000000E+00;
        sumpipe1_5 <= 0.0000000000000000E+00;
        sumpipe1_6 <= 0.0000000000000000E+00;
        sumpipe1_7 <= 0.0000000000000000E+00;
        sumpipe1_8 <= 0.0000000000000000E+00;
        sumpipe1_9 <= 0.0000000000000000E+00;
        sumpipe1_10 <= 0.0000000000000000E+00;
        sumpipe1_11 <= 0.0000000000000000E+00;
        sumpipe1_12 <= 0.0000000000000000E+00;
        sumpipe1_13 <= 0.0000000000000000E+00;
        sumpipe1_14 <= 0.0000000000000000E+00;
        sumpipe1_15 <= 0.0000000000000000E+00;
        sumpipe1_16 <= 0.0000000000000000E+00;
        sumpipe1_17 <= 0.0000000000000000E+00;
        sumpipe1_18 <= 0.0000000000000000E+00;
        sumpipe1_19 <= 0.0000000000000000E+00;
        sumpipe1_20 <= 0.0000000000000000E+00;
        sumpipe1_21 <= 0.0000000000000000E+00;
        sumpipe1_22 <= 0.0000000000000000E+00;
        sumpipe1_23 <= 0.0000000000000000E+00;
        sumpipe1_24 <= 0.0000000000000000E+00;
        sumpipe1_25 <= 0.0000000000000000E+00;
        sumpipe1_26 <= 0.0000000000000000E+00;
        sumpipe1_27 <= 0.0000000000000000E+00;
        sumpipe1_28 <= 0.0000000000000000E+00;
        sumpipe1_29 <= 0.0000000000000000E+00;
        sumpipe1_30 <= 0.0000000000000000E+00;
        sumpipe1_31 <= 0.0000000000000000E+00;
        sumpipe1_32 <= 0.0000000000000000E+00;
        sumpipe1_33 <= 0.0000000000000000E+00;
        sumpipe1_34 <= 0.0000000000000000E+00;
        sumpipe1_35 <= 0.0000000000000000E+00;
        sumpipe1_36 <= 0.0000000000000000E+00;
        sumpipe1_37 <= 0.0000000000000000E+00;
        sumpipe1_38 <= 0.0000000000000000E+00;
        sumpipe1_39 <= 0.0000000000000000E+00;
        sumpipe1_40 <= 0.0000000000000000E+00;
        sumpipe1_41 <= 0.0000000000000000E+00;
        sumpipe1_42 <= 0.0000000000000000E+00;
        sumpipe1_43 <= 0.0000000000000000E+00;
        sumpipe1_44 <= 0.0000000000000000E+00;
        sumpipe1_45 <= 0.0000000000000000E+00;
        sumpipe1_46 <= 0.0000000000000000E+00;
        sumpipe1_47 <= 0.0000000000000000E+00;
        sumpipe1_48 <= 0.0000000000000000E+00;
        sumpipe1_49 <= 0.0000000000000000E+00;
        sumpipe1_50 <= 0.0000000000000000E+00;
        sumpipe1_51 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= sum1_14;
          sumpipe1_15 <= sum1_15;
          sumpipe1_16 <= sum1_16;
          sumpipe1_17 <= sum1_17;
          sumpipe1_18 <= sum1_18;
          sumpipe1_19 <= sum1_19;
          sumpipe1_20 <= sum1_20;
          sumpipe1_21 <= sum1_21;
          sumpipe1_22 <= sum1_22;
          sumpipe1_23 <= sum1_23;
          sumpipe1_24 <= sum1_24;
          sumpipe1_25 <= sum1_25;
          sumpipe1_26 <= sum1_26;
          sumpipe1_27 <= sum1_27;
          sumpipe1_28 <= sum1_28;
          sumpipe1_29 <= sum1_29;
          sumpipe1_30 <= sum1_30;
          sumpipe1_31 <= sum1_31;
          sumpipe1_32 <= sum1_32;
          sumpipe1_33 <= sum1_33;
          sumpipe1_34 <= sum1_34;
          sumpipe1_35 <= sum1_35;
          sumpipe1_36 <= sum1_36;
          sumpipe1_37 <= sum1_37;
          sumpipe1_38 <= sum1_38;
          sumpipe1_39 <= sum1_39;
          sumpipe1_40 <= sum1_40;
          sumpipe1_41 <= sum1_41;
          sumpipe1_42 <= sum1_42;
          sumpipe1_43 <= sum1_43;
          sumpipe1_44 <= sum1_44;
          sumpipe1_45 <= sum1_45;
          sumpipe1_46 <= sum1_46;
          sumpipe1_47 <= sum1_47;
          sumpipe1_48 <= sum1_48;
          sumpipe1_49 <= sum1_49;
          sumpipe1_50 <= sum1_50;
          sumpipe1_51 <= product1;
        end
      end
    end // temp_process102

  always @* sum2_1 <= sumpipe1_1 + sumpipe1_2;

  always @* sum2_2 <= sumpipe1_3 + sumpipe1_4;

  always @* sum2_3 <= sumpipe1_5 + sumpipe1_6;

  always @* sum2_4 <= sumpipe1_7 + sumpipe1_8;

  always @* sum2_5 <= sumpipe1_9 + sumpipe1_10;

  always @* sum2_6 <= sumpipe1_11 + sumpipe1_12;

  always @* sum2_7 <= sumpipe1_13 + sumpipe1_14;

  always @* sum2_8 <= sumpipe1_15 + sumpipe1_16;

  always @* sum2_9 <= sumpipe1_17 + sumpipe1_18;

  always @* sum2_10 <= sumpipe1_19 + sumpipe1_20;

  always @* sum2_11 <= sumpipe1_21 + sumpipe1_22;

  always @* sum2_12 <= sumpipe1_23 + sumpipe1_24;

  always @* sum2_13 <= sumpipe1_25 + sumpipe1_26;

  always @* sum2_14 <= sumpipe1_27 + sumpipe1_28;

  always @* sum2_15 <= sumpipe1_29 + sumpipe1_30;

  always @* sum2_16 <= sumpipe1_31 + sumpipe1_32;

  always @* sum2_17 <= sumpipe1_33 + sumpipe1_34;

  always @* sum2_18 <= sumpipe1_35 + sumpipe1_36;

  always @* sum2_19 <= sumpipe1_37 + sumpipe1_38;

  always @* sum2_20 <= sumpipe1_39 + sumpipe1_40;

  always @* sum2_21 <= sumpipe1_41 + sumpipe1_42;

  always @* sum2_22 <= sumpipe1_43 + sumpipe1_44;

  always @* sum2_23 <= sumpipe1_45 + sumpipe1_46;

  always @* sum2_24 <= sumpipe1_47 + sumpipe1_48;

  always @* sum2_25 <= sumpipe1_49 + sumpipe1_50;

  always @ ( posedge clk)
    begin: temp_process103
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0.0000000000000000E+00;
        sumpipe2_2 <= 0.0000000000000000E+00;
        sumpipe2_3 <= 0.0000000000000000E+00;
        sumpipe2_4 <= 0.0000000000000000E+00;
        sumpipe2_5 <= 0.0000000000000000E+00;
        sumpipe2_6 <= 0.0000000000000000E+00;
        sumpipe2_7 <= 0.0000000000000000E+00;
        sumpipe2_8 <= 0.0000000000000000E+00;
        sumpipe2_9 <= 0.0000000000000000E+00;
        sumpipe2_10 <= 0.0000000000000000E+00;
        sumpipe2_11 <= 0.0000000000000000E+00;
        sumpipe2_12 <= 0.0000000000000000E+00;
        sumpipe2_13 <= 0.0000000000000000E+00;
        sumpipe2_14 <= 0.0000000000000000E+00;
        sumpipe2_15 <= 0.0000000000000000E+00;
        sumpipe2_16 <= 0.0000000000000000E+00;
        sumpipe2_17 <= 0.0000000000000000E+00;
        sumpipe2_18 <= 0.0000000000000000E+00;
        sumpipe2_19 <= 0.0000000000000000E+00;
        sumpipe2_20 <= 0.0000000000000000E+00;
        sumpipe2_21 <= 0.0000000000000000E+00;
        sumpipe2_22 <= 0.0000000000000000E+00;
        sumpipe2_23 <= 0.0000000000000000E+00;
        sumpipe2_24 <= 0.0000000000000000E+00;
        sumpipe2_25 <= 0.0000000000000000E+00;
        sumpipe2_26 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
          sumpipe2_8 <= sum2_8;
          sumpipe2_9 <= sum2_9;
          sumpipe2_10 <= sum2_10;
          sumpipe2_11 <= sum2_11;
          sumpipe2_12 <= sum2_12;
          sumpipe2_13 <= sum2_13;
          sumpipe2_14 <= sum2_14;
          sumpipe2_15 <= sum2_15;
          sumpipe2_16 <= sum2_16;
          sumpipe2_17 <= sum2_17;
          sumpipe2_18 <= sum2_18;
          sumpipe2_19 <= sum2_19;
          sumpipe2_20 <= sum2_20;
          sumpipe2_21 <= sum2_21;
          sumpipe2_22 <= sum2_22;
          sumpipe2_23 <= sum2_23;
          sumpipe2_24 <= sum2_24;
          sumpipe2_25 <= sum2_25;
          sumpipe2_26 <= sumpipe1_51;
        end
      end
    end // temp_process103

  always @* sum3_1 <= sumpipe2_1 + sumpipe2_2;

  always @* sum3_2 <= sumpipe2_3 + sumpipe2_4;

  always @* sum3_3 <= sumpipe2_5 + sumpipe2_6;

  always @* sum3_4 <= sumpipe2_7 + sumpipe2_8;

  always @* sum3_5 <= sumpipe2_9 + sumpipe2_10;

  always @* sum3_6 <= sumpipe2_11 + sumpipe2_12;

  always @* sum3_7 <= sumpipe2_13 + sumpipe2_14;

  always @* sum3_8 <= sumpipe2_15 + sumpipe2_16;

  always @* sum3_9 <= sumpipe2_17 + sumpipe2_18;

  always @* sum3_10 <= sumpipe2_19 + sumpipe2_20;

  always @* sum3_11 <= sumpipe2_21 + sumpipe2_22;

  always @* sum3_12 <= sumpipe2_23 + sumpipe2_24;

  always @* sum3_13 <= sumpipe2_25 + sumpipe2_26;

  always @ ( posedge clk)
    begin: temp_process104
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0.0000000000000000E+00;
        sumpipe3_2 <= 0.0000000000000000E+00;
        sumpipe3_3 <= 0.0000000000000000E+00;
        sumpipe3_4 <= 0.0000000000000000E+00;
        sumpipe3_5 <= 0.0000000000000000E+00;
        sumpipe3_6 <= 0.0000000000000000E+00;
        sumpipe3_7 <= 0.0000000000000000E+00;
        sumpipe3_8 <= 0.0000000000000000E+00;
        sumpipe3_9 <= 0.0000000000000000E+00;
        sumpipe3_10 <= 0.0000000000000000E+00;
        sumpipe3_11 <= 0.0000000000000000E+00;
        sumpipe3_12 <= 0.0000000000000000E+00;
        sumpipe3_13 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sum3_4;
          sumpipe3_5 <= sum3_5;
          sumpipe3_6 <= sum3_6;
          sumpipe3_7 <= sum3_7;
          sumpipe3_8 <= sum3_8;
          sumpipe3_9 <= sum3_9;
          sumpipe3_10 <= sum3_10;
          sumpipe3_11 <= sum3_11;
          sumpipe3_12 <= sum3_12;
          sumpipe3_13 <= sum3_13;
        end
      end
    end // temp_process104

  always @* sum4_1 <= sumpipe3_1 + sumpipe3_2;

  always @* sum4_2 <= sumpipe3_3 + sumpipe3_4;

  always @* sum4_3 <= sumpipe3_5 + sumpipe3_6;

  always @* sum4_4 <= sumpipe3_7 + sumpipe3_8;

  always @* sum4_5 <= sumpipe3_9 + sumpipe3_10;

  always @* sum4_6 <= sumpipe3_11 + sumpipe3_12;

  always @ ( posedge clk)
    begin: temp_process105
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0.0000000000000000E+00;
        sumpipe4_2 <= 0.0000000000000000E+00;
        sumpipe4_3 <= 0.0000000000000000E+00;
        sumpipe4_4 <= 0.0000000000000000E+00;
        sumpipe4_5 <= 0.0000000000000000E+00;
        sumpipe4_6 <= 0.0000000000000000E+00;
        sumpipe4_7 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
          sumpipe4_3 <= sum4_3;
          sumpipe4_4 <= sum4_4;
          sumpipe4_5 <= sum4_5;
          sumpipe4_6 <= sum4_6;
          sumpipe4_7 <= sumpipe3_13;
        end
      end
    end // temp_process105

  always @* sum5_1 <= sumpipe4_1 + sumpipe4_2;

  always @* sum5_2 <= sumpipe4_3 + sumpipe4_4;

  always @* sum5_3 <= sumpipe4_5 + sumpipe4_6;

  always @ ( posedge clk)
    begin: temp_process106
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0.0000000000000000E+00;
        sumpipe5_2 <= 0.0000000000000000E+00;
        sumpipe5_3 <= 0.0000000000000000E+00;
        sumpipe5_4 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
          sumpipe5_2 <= sum5_2;
          sumpipe5_3 <= sum5_3;
          sumpipe5_4 <= sumpipe4_7;
        end
      end
    end // temp_process106

  always @* sum6_1 <= sumpipe5_1 + sumpipe5_2;

  always @* sum6_2 <= sumpipe5_3 + sumpipe5_4;

  always @ ( posedge clk)
    begin: temp_process107
      if (reset == 1'b1) begin
        sumpipe6_1 <= 0.0000000000000000E+00;
        sumpipe6_2 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe6_1 <= sum6_1;
          sumpipe6_2 <= sum6_2;
        end
      end
    end // temp_process107

  always @* sum7_1 <= sumpipe6_1 + sumpipe6_2;

  always @ ( posedge clk)
    begin: temp_process108
      if (reset == 1'b1) begin
        sumpipe7_1 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe7_1 <= sum7_1;
        end
      end
    end // temp_process108

  always @* sum_final <= sumpipe7_1;


  always @* output_typeconvert <= sum_final;


  always @ ( posedge clk)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = $realtobits(output_register);
endmodule  // testSRRCdesigner
